{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Atlassian Confluence Data Center",
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Confluence setup"
          },
          "Parameters": [
            "ConfluenceVersion"
          ]
        },
        {
          "Label": {
            "default": "Cluster nodes"
          },
          "Parameters": [
            "ClusterNodeInstanceType",
            "ClusterNodeMin",
            "ClusterNodeMax"
          ]
        },
        {
          "Label": {
            "default": "Database"
          },
          "Parameters": [
            "DBInstanceClass",
            "DBMasterUserPassword",
            "DBPassword",
            "DBStorage",
            "DBStorageType",
            "DBIops",
            "DBMultiAZ"
          ]
        },
        {
          "Label": {
            "default": "Networking"
          },
          "Parameters": [
            "VPC",
            "ExternalSubnets",
            "InternalSubnets",
            "AssociatePublicIpAddress",
            "KeyName",
            "SSLCertificateName"
          ]
        },
        {
          "Label": {
            "default": "Advanced (Optional)"
          },
          "Parameters": [
            "CatalinaOpts",
            "StartCollectd"
          ]
        }
      ],
      "ParameterLabels": {
        "AssociatePublicIpAddress": {
          "default": "Assign public IP"
        },
        "CatalinaOpts": {
          "default": "Catalina options"
        },
        "ClusterNodeMax": {
          "default": "Maximum number of cluster nodes"
        },
        "ClusterNodeMin": {
          "default": "Minimum number of cluster nodes"
        },
        "ClusterNodeInstanceType": {
          "default": "Confluence cluster node instance type"
        },
        "DBInstanceClass": {
          "default": "Database instance class"
        },
        "DBMasterUserPassword": {
          "default": "Master password *"
        },
        "DBPassword": {
          "default": "Confluence database password *"
        },
        "DBStorage": {
          "default": "Database storage"
        },
        "DBStorageType": {
          "default": "Database storage type"
        },
        "DBIops": {
          "default": "RDS Provisioned IOPS"
        },
        "ConfluenceVersion": {
          "default": "Version *"
        },
        "ConfluenceDownloadUrl": {
          "default": "https://www.atlassian.com/software/confluence/downloads/binary/atlassian-confluence-6.0.1-x64.bin"
        },
        "KeyName": {
          "default": "Key Name *"
        },
        "SSLCertificateName": {
          "default": "SSL Certificate Name"
        },
        "ExternalSubnets": {
          "default": "External subnets *"
        },
        "InternalSubnets": {
          "default": "Internal subnets *"
        },
        "VPC": {
          "default": "VPC *"
        }
      }
    }
  },
  "Parameters": {
    "AssociatePublicIpAddress": {
      "Description": "Controls if the EC2 instances are assigned a public IP address",
      "Type": "String",
      "Default": "true",
      "AllowedValues": [
        "true",
        "false"
      ],
      "ConstraintDescription": "Must be 'true' or 'false'."
    },
    "ClusterNodeMax": {
      "Type": "Number",
      "Default": "1"
    },
    "ClusterNodeMin": {
      "Type": "Number",
      "Default": "1"
    },
    "ClusterNodeInstanceType": {
      "Type": "String",
      "Default": "c3.xlarge",
      "AllowedValues": [
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "x1.32xlarge"
      ],
      "ConstraintDescription": "Must be an EC2 instance type in the C3, I2, R3, or X1 family, 'xlarge' or larger",
      "Description": "Instance type for the cluster nodes."
    },
    "CatalinaOpts": {
      "Type": "String",
      "Default": "Java options passed to the JVM that runs Confluence."
    },
    "DBInstanceClass": {
      "Description": "RDS instance type",
      "Type": "String",
      "Default": "db.m4.xlarge",
      "AllowedValues": [
        "db.m4.large",
        "db.m4.xlarge",
        "db.m4.2xlarge",
        "db.m4.4xlarge",
        "db.m4.10xlarge",
        "db.r3.large",
        "db.r3.xlarge",
        "db.r3.2xlarge",
        "db.r3.4xlarge",
        "db.r3.8xlarge",
        "db.t2.medium",
        "db.t2.large"
      ],
      "ConstraintDescription": "Must be a valid RDS instance class, 'db.t2.medium' or larger."
    },
    "DBMasterUserPassword": {
      "NoEcho": "true",
      "Default": "",
      "Description": "Database admin account password.",
      "Type": "String",
      "MaxLength": "128",
      "MinLength": "8",
      "AllowedPattern": "[a-zA-Z0-9]*",
      "ConstraintDescription": "Must be at least 8 alphanumeric characters."
    },
    "DBPassword": {
      "Default": "",
      "Description": "Database user account password.",
      "Type": "String",
      "MaxLength": "128",
      "MinLength": "8",
      "AllowedPattern": "[a-zA-Z0-9]*",
      "ConstraintDescription": "Must be at least 8 alphanumeric characters.",
      "NoEcho": "true"
    },
    "DBStorage": {
      "Description": "Database allocated storage size, in gigabytes (GB)",
      "Type": "Number",
      "Default": "10"
    },
    "DBStorageType": {
      "Description": "Database storage type",
      "Type": "String",
      "Default": "General Purpose (SSD)",
      "AllowedValues": [
        "General Purpose (SSD)",
        "Provisioned IOPS"
      ],
      "ConstraintDescription": "Must be 'General Purpose (SSD)' or 'Provisioned IOPS'."
    },
    "DBMultiAZ": {
      "Type": "String",
      "Default": "true",
      "AllowedValues": [
        "true",
        "false"
      ],
      "ConstraintDescription": "Must be 'true' or 'false'."
    },
    "DBIops": {
      "Description": "Must be in the range of 1000 - 30000 and a multiple of 1000. This value is only used with Provisioned IOPS. Note: The ratio of IOPS per allocated-storage must be between 3.00 and 10.00.",
      "Type": "Number",
      "Default": "1000",
      "MinValue": "1000",
      "MaxValue": "30000",
      "ConstraintDescription": "Must be in the range 1000 - 30000."
    },
    "ConfluenceVersion": {
      "Description": "The version of Confluence to install",
      "Type": "String",
      "AllowedPattern": "(\\d+\\.\\d+\\.\\d+(-?.*))",
      "ConstraintDescription": "Must be a valid Confluence version number. For example: 6.0.1 or higher",
      "AllowedValues": [
        "6.0.1"
      ]
    },
    "ConfluenceDownloadUrl": {
      "Description": "This is URL to download Confluence if we don't provide S3 bucket and Confluence version",
      "Type": "String",
      "ConstraintDescription": "Must be a valid Confluence version number. For example: 6.0.1 or higher",
    },
    "KeyName": {
      "Description": "The EC2 Key Pair to allow SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "Must be the name of an existing EC2 Key Pair."
    },
    "SSLCertificateName": {
      "Description": "The name of your Server Certificate to use for HTTPS.  Leave blank if you don't want to set up HTTPS at this time",
      "Type": "String",
      "MinLength": "0",
      "MaxLength": "32",
      "Default": ""
    },
    "StartCollectd": {
      "Description": "Should the collectd service be started",
      "Type": "String",
      "Default": "true",
      "AllowedValues": [
        "true",
        "false"
      ],
      "ConstraintDescription": "Must be 'true' or 'false'."
    },
    "ExternalSubnets": {
      "Description": "Subnets (two or more) where your user-facing load balancer will be deployed. MUST be within the selected VPC.",
      "Type": "List<AWS::EC2::Subnet::Id>",
      "ConstraintDescription": "Must be a list of two or more Subnet ID's within the selected VPC."
    },
    "InternalSubnets": {
      "Description": "Subnets (two or more) where your cluster nodes and other internal infrastructure will be deployed. MUST be within the selected VPC. Specify the ExternalSubnets again here if you wish to deploy the whole stack into the same subnets.",
      "Type": "List<AWS::EC2::Subnet::Id>",
      "ConstraintDescription": "Must be a list of two or more Subnet ID's within the selected VPC."
    },
    "VPC": {
      "Description": "Virtual Private Cloud",
      "Type": "AWS::EC2::VPC::Id",
      "ConstraintDescription": "Must be the ID of a VPC."
    }
  },
  "Conditions": {
    "DBProvisionedIops": {
      "Fn::Equals": [
        {
          "Ref": "DBStorageType"
        },
        "Provisioned IOPS"
      ]
    },
    "DoCollectd": {
      "Fn::Equals": [
        {
          "Ref": "StartCollectd"
        },
        "true"
      ]
    },
    "DoSetDBMasterUserPassword": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "DBMasterUserPassword"
            },
            ""
          ]
        }
      ]
    },
    "DoSSL": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "SSLCertificateName"
            },
            ""
          ]
        }
      ]
    }
  },
  "Mappings": {
    "AWSInstanceType2Arch": {
      "c3.large": {
        "Arch": "HVM64"
      },
      "c3.xlarge": {
        "Arch": "HVM64"
      },
      "c3.2xlarge": {
        "Arch": "HVM64"
      },
      "c3.4xlarge": {
        "Arch": "HVM64"
      },
      "c3.8xlarge": {
        "Arch": "HVM64"
      },
      "c4.large": {
        "Arch": "HVM64"
      },
      "c4.xlarge": {
        "Arch": "HVM64"
      },
      "c4.2xlarge": {
        "Arch": "HVM64"
      },
      "c4.4xlarge": {
        "Arch": "HVM64"
      },
      "c4.8xlarge": {
        "Arch": "HVM64"
      },
      "d2.xlarge": {
        "Arch": "HVM64"
      },
      "d2.2xlarge": {
        "Arch": "HVM64"
      },
      "d2.4xlarge": {
        "Arch": "HVM64"
      },
      "d2.8xlarge": {
        "Arch": "HVM64"
      },
      "i2.xlarge": {
        "Arch": "HVM64"
      },
      "i2.2xlarge": {
        "Arch": "HVM64"
      },
      "i2.4xlarge": {
        "Arch": "HVM64"
      },
      "i2.8xlarge": {
        "Arch": "HVM64"
      },
      "m4.large": {
        "Arch": "HVM64"
      },
      "m4.xlarge": {
        "Arch": "HVM64"
      },
      "m4.2xlarge": {
        "Arch": "HVM64"
      },
      "m4.4xlarge": {
        "Arch": "HVM64"
      },
      "m4.10xlarge": {
        "Arch": "HVM64"
      },
      "m4.16xlarge": {
        "Arch": "HVM64"
      },
      "r3.large": {
        "Arch": "HVM64"
      },
      "r3.xlarge": {
        "Arch": "HVM64"
      },
      "r3.2xlarge": {
        "Arch": "HVM64"
      },
      "r3.4xlarge": {
        "Arch": "HVM64"
      },
      "r3.8xlarge": {
        "Arch": "HVM64"
      },
      "x1.32xlarge": {
        "Arch": "HVM64"
      }
    },
    "AWSRegionArch2AMI": {
      "us-east-1": {
        "HVM64": "ami-9ee9c389",
        "HVMG2": "NOT_SUPPORTED"
      },
      "ap-south-1": {
        "HVM64": "ami-2adca845",
        "HVMG2": "NOT_SUPPORTED"
      },
      "eu-west-1": {
        "HVM64": "ami-5eb9ea2d",
        "HVMG2": "NOT_SUPPORTED"
      },
      "ap-northeast-2": {
        "HVM64": "ami-b98057d7",
        "HVMG2": "NOT_SUPPORTED"
      },
      "ap-northeast-1": {
        "HVM64": "ami-e8822889",
        "HVMG2": "NOT_SUPPORTED"
      },
      "sa-east-1": {
        "HVM64": "ami-7f1d8213",
        "HVMG2": "NOT_SUPPORTED"
      },
      "ap-southeast-1": {
        "HVM64": "ami-0e14b76d",
        "HVMG2": "NOT_SUPPORTED"
      },
      "ap-southeast-2": {
        "HVM64": "ami-ea704e89",
        "HVMG2": "NOT_SUPPORTED"
      },
      "eu-central-1": {
        "HVM64": "ami-bb01c4d4",
        "HVMG2": "NOT_SUPPORTED"
      },
      "us-east-2": {
        "HVM64": "ami-56693333",
        "HVMG2": "NOT_SUPPORTED"
      },
      "us-west-1": {
        "HVM64": "ami-7fdc891f",
        "HVMG2": "NOT_SUPPORTED"
      },
      "us-west-2": {
        "HVM64": "ami-7368c513",
        "HVMG2": "NOT_SUPPORTED"
      }
    }
  },
  "Resources": {
    "ConfluenceClusterNodeRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "ConfluenceClusterNodePolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "ec2:DescribeInstances",
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "ConfluenceClusterNodeInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "ConfluenceClusterNodeRole"
          }
        ]
      }
    },
    "ClusterNodeGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "DesiredCapacity": {
          "Ref": "ClusterNodeMin"
        },
        "LaunchConfigurationName": {
          "Ref": "ClusterNodeLaunchConfig"
        },
        "MaxSize": {
          "Ref": "ClusterNodeMax"
        },
        "MinSize": {
          "Ref": "ClusterNodeMin"
        },
        "TargetGroupARNs": [
          {
            "Ref": "MainTargetGroup"
          },
          {
            "Ref": "SynchronyTargetGroup"
          }
        ],
        "VPCZoneIdentifier": {
          "Ref": "InternalSubnets"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Confluence Node",
            "PropagateAtLaunch": true
          },
          {
            "Key": "Cluster",
            "Value": {
              "Ref": "AWS::StackName"
            },
            "PropagateAtLaunch": true
          }
        ]
      }
    },
    "ClusterNodeLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "DependsOn": [
        "EFSMountAz1",
        "EFSMountAz2",
        "DB"
      ],
      "Metadata": {
        "Comment": "",
        "AWS::CloudFormation::Init": {
          "configSets": {
            "default": [
              "0"
            ]
          },
          "0": {
            "files": {
              "/etc/atl": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "ATL_CONFLUENCE_INSTALLER_DOWNLOAD_URL=",
                      {
                        "Ref": "ConfluenceDownloadUrl"
                      },
                      "\n",
                      "ATL_APP_DATA_MOUNT_ENABLED=false",
                      "\n",
                      "ATL_DB_PASSWORD=",
                      {
                        "Ref": "DBMasterUserPassword"
                      },
                      "\n",
                      "ATL_DB_NAME=confluence",
                      "\n",
                      "ATL_DB_HOST=",
                      {
                        "Fn::GetAtt": [
                          "DB",
                          "Endpoint.Address"
                        ]
                      },
                      "\n",
                      "ATL_DB_PORT=",
                      {
                        "Fn::GetAtt": [
                          "DB",
                          "Endpoint.Port"
                        ]
                      },
                      "\n",
                      "ATL_JDBC_DRIVER=org.postgresql.Driver",
                      "\n",
                      "ATL_JDBC_URL=jdbc:postgresql://",
                      {
                        "Fn::GetAtt": [
                          "DB",
                          "Endpoint.Address"
                        ]
                      },
                      ":",
                      {
                        "Fn::GetAtt": [
                          "DB",
                          "Endpoint.Port"
                        ]
                      },
                      "/confluence",
                      "\n",
                      "ATL_JDBC_USER=atlconfluence",
                      "\n",
                      "ATL_JDBC_PASSWORD=",
                      {
                        "Ref": "DBPassword"
                      },
                      "\n",
                      "ATL_ENABLED_PRODUCTS=Confluence",
                      "\n",
                      "ATL_ENABLED_SHARED_HOMES=",
                      "\n",
                      "ATL_CONFLUENCE_VERSION=",
                      {
                        "Ref": "ConfluenceVersion"
                      },
                      "\n",
                      "ATL_CONFLUENCE_DATA_CENTER=true",
                      "\n",
                      "ATL_NGINX_ENABLED=false",
                      "\n",
                      "ATL_POSTGRES_ENABLED=false",
                      "\n",
                      "ATL_PROXY_NAME=",
                      {
                        "Fn::GetAtt": [
                          "LoadBalancer",
                          "DNSName"
                        ]
                      },
                      "\n",
                      "ATL_SSL_SELF_CERT_ENABLED=false",
                      "\n",
                      {
                        "Fn::If": [
                          "DoSSL",
                          "ATL_SSL_PROXY=true\n",
                          {
                            "Ref": "AWS::NoValue"
                          }
                        ]
                      },
                      "ATL_AWS_STACK_NAME=",
                      {
                        "Ref": "AWS::StackName"
                      },
                      "\n",
                      "ATL_HAZELCAST_NETWORK_AWS_IAM_ROLE=",
                      {
                        "Ref": "ConfluenceClusterNodeRole"
                      },
                      "\n",
                      "ATL_HAZELCAST_NETWORK_AWS_IAM_REGION=",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n",
                      "ATL_HAZELCAST_GROUP_NAME=",
                      {
                        "Ref": "SecurityGroup"
                      },
                      "\n",
                      "ATL_HAZELCAST_NETWORK_AWS_TAG_KEY=Cluster\n",
                      "ATL_HAZELCAST_NETWORK_AWS_TAG_VALUE=",
                      {
                        "Ref": "AWS::StackName"
                      },
                      "\n"
                    ]
                  ]
                }
              },
              "/etc/cfn/cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]",
                      "\n",
                      "stack=",
                      {
                        "Ref": "AWS::StackId"
                      },
                      "\n",
                      "region=",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                },
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[cfn-auto-reloader-hook]",
                      "\n",
                      "triggers=post.update",
                      "\n",
                      "path=Resources.ClusterNodeLaunchConfig.Metadata.AWS::CloudFormation::Init",
                      "\n",
                      "action=/opt/aws/bin/cfn-init -v ",
                      "         --stack ",
                      {
                        "Ref": "AWS::StackName"
                      },
                      "         --resource ClusterNodeLaunchConfig ",
                      "         --region ",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n",
                      "runas=root",
                      "\n"
                    ]
                  ]
                }
              }
            },
            "commands": {
              "010_make_mount_point": {
                "command": "mkdir -p /media/atl",
                "ignoreErrors": "false"
              },
              "020_add_nfs_mount": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "echo ",
                      {
                        "Fn::Join": [
                          "",
                          [
                            "$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone).",
                            {
                              "Ref": "ElasticFileSystem"
                            },
                            ".efs.",
                            {
                              "Ref": "AWS::Region"
                            },
                            ".amazonaws.com"
                          ]
                        ]
                      },
                      ":/ /media/atl nfs4 noatime,intr,rsize=32768,wsize=32768 0 0 >>/etc/fstab"
                    ]
                  ]
                },
                "ignoreErrors": "false"
              },
              "030_mount_all": {
                "command": "mount -a",
                "ignoreErrors": "false"
              },
              "040_make_shared_home_dir": {
                "command": "mkdir -p /media/atl/confluence/shared-home",
                "ignoreErrors": "false"
              }
            },
            "services": {
              "sysvinit": {
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                  ]
                },
                "collectd": {
                  "Fn::If": [
                    "DoCollectd",
                    {
                      "enabled": "true",
                      "ensureRunning": "true"
                    },
                    {
                      "Ref": "AWS::NoValue"
                    }
                  ]
                },
                "rpcbind": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "packages": {
                    "yum": [
                      "nfs-utils"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "Properties": {
        "IamInstanceProfile": {
          "Ref": "ConfluenceClusterNodeInstanceProfile"
        },
        "AssociatePublicIpAddress": {
          "Ref": "AssociatePublicIpAddress"
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvdf",
            "Ebs": {},
            "NoDevice": true
          }
        ],
        "KeyName": {
          "Ref": "KeyName"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionArch2AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "AWSInstanceType2Arch",
                {
                  "Ref": "ClusterNodeInstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "InstanceType": {
          "Ref": "ClusterNodeInstanceType"
        },
        "SecurityGroups": [
          {
            "Ref": "SecurityGroup"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xe",
                "\n",
                "yum update -y aws-cfn-bootstrap",
                "\n",
                "/opt/aws/bin/cfn-init -v ",
                "         --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource ClusterNodeLaunchConfig ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "/opt/aws/bin/cfn-signal -e $? ",
                "         --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource ClusterNodeGroup ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n"
              ]
            ]
          }
        }
      }
    },
    "ElasticFileSystem": {
      "Type": "AWS::EFS::FileSystem",
      "Properties": {
        "FileSystemTags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          }
        ]
      }
    },
    "EFSMountAz1": {
      "Type": "AWS::EFS::MountTarget",
      "Properties": {
        "FileSystemId": {
          "Ref": "ElasticFileSystem"
        },
        "SecurityGroups": [
          {
            "Ref": "SecurityGroup"
          }
        ],
        "SubnetId": {
          "Fn::Select": [
            "0",
            {
              "Ref": "InternalSubnets"
            }
          ]
        }
      }
    },
    "EFSMountAz2": {
      "Type": "AWS::EFS::MountTarget",
      "Properties": {
        "FileSystemId": {
          "Ref": "ElasticFileSystem"
        },
        "SecurityGroups": [
          {
            "Ref": "SecurityGroup"
          }
        ],
        "SubnetId": {
          "Fn::Select": [
            "1",
            {
              "Ref": "InternalSubnets"
            }
          ]
        }
      }
    },
    "DB": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "AllocatedStorage": {
          "Ref": "DBStorage"
        },
        "DBInstanceClass": {
          "Ref": "DBInstanceClass"
        },
        "DBSubnetGroupName": {
          "Ref": "DBSubnetGroup"
        },
        "Engine": "postgres",
        "EngineVersion": "9.3.12",
        "MasterUsername": "postgres",
        "MasterUserPassword": {
          "Fn::If": [
            "DoSetDBMasterUserPassword",
            {
              "Ref": "DBMasterUserPassword"
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "StorageType": {
          "Fn::If": [
            "DBProvisionedIops",
            "io1",
            "gp2"
          ]
        },
        "Iops": {
          "Fn::If": [
            "DBProvisionedIops",
            {
              "Ref": "DBIops"
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "MultiAZ": {
          "Ref": "DBMultiAZ"
        },
        "VPCSecurityGroups": [
          {
            "Ref": "SecurityGroup"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "Confluence PostgreSQL Database"
          }
        ]
      }
    },
    "DBSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupDescription": "DBSubnetGroup",
        "SubnetIds": {
          "Ref": "InternalSubnets"
        }
      }
    },
    "LoadBalancer": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "LoadBalancerAttributes": [
          {
            "Key": "idle_timeout.timeout_seconds",
            "Value": "240"
          }
        ],
        "Subnets": {
          "Ref": "ExternalSubnets"
        },
        "SecurityGroups": [
          {
            "Ref": "SecurityGroup"
          }
        ]
      }
    },
    "LoadBalancerListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": {
              "Ref": "MainTargetGroup"
            }
          }
        ],
        "LoadBalancerArn": {
          "Ref": "LoadBalancer"
        },
        "Port": 80,
        "Protocol": "HTTP"
      }
    },
    "SynchronyListenerRule": {
      "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
      "Properties": {
        "Actions": [
          {
            "Type": "forward",
            "TargetGroupArn": {
              "Ref": "SynchronyTargetGroup"
            }
          }
        ],
        "Conditions": [
          {
            "Field": "path-pattern",
            "Values": [
              "/synchrony/*"
            ]
          }
        ],
        "ListenerArn": {
          "Ref": "LoadBalancerListener"
        },
        "Priority": 1
      }
    },
    "MainTargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "Port": 8080,
        "Protocol": "HTTP",
        "VpcId": {
          "Ref": "VPC"
        },
        "HealthCheckIntervalSeconds": 30,
        "HealthCheckTimeoutSeconds": 10,
        "HealthyThresholdCount": 4,
        "Matcher": {
          "HttpCode": "200"
        },
        "HealthCheckPath": "/status",
        "HealthCheckPort": "8080",
        "HealthCheckProtocol": "HTTP",
        "TargetGroupAttributes": [
            {
              "Key": "stickiness.enabled",
              "Value": "true"
            },
            {
              "Key": "stickiness.type",
              "Value": "lb_cookie"
            }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "MainTargetGroup"
          },
          {
            "Key": "Cluster",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ]
      },
      "DependsOn": [
        "LoadBalancer"
      ]
    },
    "SynchronyTargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "Port": 8091,
        "Protocol": "HTTP",
        "VpcId": {
          "Ref": "VPC"
        },
        "HealthCheckIntervalSeconds": 30,
        "HealthCheckTimeoutSeconds": 10,
        "HealthyThresholdCount": 4,
        "Matcher": {
          "HttpCode": "200"
        },
        "HealthCheckPath": "/synchrony/heartbeat",
        "HealthCheckPort": "8091",
        "HealthCheckProtocol": "HTTP",
        "TargetGroupAttributes": [
            {
              "Key": "stickiness.enabled",
              "Value": "true"
            },
            {
              "Key": "stickiness.type",
              "Value": "lb_cookie"
            }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "SynchronyTargetGroup"
          },
          {
            "Key": "Cluster",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ]
      },
      "DependsOn": [
        "LoadBalancer"
      ]
    },
    "SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Security group allowing SSH and HTTP/HTTPS access",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8091",
            "ToPort": "8091",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "SecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "SecurityGroup"
        },
        "IpProtocol": "-1",
        "FromPort": "-1",
        "ToPort": "-1",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroup"
        }
      }
    }
  },
  "Outputs": {
    "DBURL": {
      "Description": "The URL of the DB of Confluence Data Center instance",
      "Value": {
        "Fn::Join": [
          "",
          [
            "jdbc:postgresql://",
            {
              "Fn::GetAtt": [
                "DB",
                "Endpoint.Address"
              ]
            },
            ":",
            {
              "Fn::GetAtt": [
                "DB",
                "Endpoint.Port"
              ]
            }
          ]
        ]
      }
    },
    "URL": {
      "Description": "The URL of the Confluence Data Center instance",
      "Value": {
        "Fn::Join": [
          "",
          [
            {
              "Fn::If": [
                "DoSSL",
                "https",
                "http"
              ]
            },
            "://",
            {
              "Fn::GetAtt": [
                "LoadBalancer",
                "DNSName"
              ]
            }
          ]
        ]
      }
    }
  }
}
