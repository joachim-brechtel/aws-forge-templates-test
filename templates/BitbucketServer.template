{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Atlassian Bitbucket Server",
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Bitbucket setup"
          },
          "Parameters": [
            "BitbucketVersion"
          ]
        },
        {
          "Label": {
            "default": "Size"
          },
          "Parameters": [
            "InstanceType",
            "HomeSize",
            "HomeVolumeType",
            "HomeIops",
            "EbsOptimized"
          ]
        },
        {
          "Label": {
            "default": "Networking"
          },
          "Parameters": [
            "VPC",
            "Subnet",
            "AssociatePublicIpAddress",
            "CidrBlock",
            "KeyName",
            "SSLCertificate"
          ]
        },
        {
          "Label": {
            "default": "Advanced (Optional)"
          },
          "Parameters": [
            "HomeVolumeSnapshotId",
            "BitbucketProperties",
            "CatalinaOpts",
            "AMIOpts",
            "HomeDeleteOnTermination",
            "RootSize",
            "RootVolumeType",
            "RootIops",
            "StartCollectd"
          ]
        }
      ],
      "ParameterLabels": {
        "AMIOpts": {
          "default": "AMI Options"
        },
        "AssociatePublicIpAddress": {
          "default": "Assign public IP"
        },
        "BitbucketProperties": {
          "default": "Bitbucket properties"
        },
        "BitbucketVersion": {
          "default": "Version *"
        },
        "CatalinaOpts": {
          "default": "Catalina Options"
        },
        "CidrBlock": {
          "default": "Permitted IP range *"
        },
        "InstanceType": {
          "default": "Instance type"
        },
        "EbsOptimized": {
          "default": "Enable EBS Optimizations"
        },
        "HomeDeleteOnTermination": {
          "default": "Delete Home on termination"
        },
        "HomeIops": {
          "default": "Home directory IOPS"
        },
        "HomeSize": {
          "default": "Home directory size"
        },
        "HomeVolumeSnapshotId": {
          "default": "Home volume snapshot ID to restore"
        },
        "HomeVolumeType": {
          "default": "Home directory volume type"
        },
        "KeyName": {
          "default": "Key Name *"
        },
        "RootIops": {
          "default": "Root volume IOPS"
        },
        "RootSize": {
          "default": "Root volume size"
        },
        "RootVolumeType": {
          "default": "Root volume type"
        },
        "SSLCertificate": {
          "default": "SSL Certificate"
        },
        "StartCollectd": {
          "default": "Start the collectd service"
        },
        "Subnet": {
          "default": "Subnet *"
        },
        "VPC": {
          "default": "VPC *"
        }
      }
    }
  },
  "Parameters": {
    "AMIOpts": {
      "Description": "A comma separated list of options to pass to the AMI",
      "Type": "CommaDelimitedList",
      "Default": ""
    },
    "AssociatePublicIpAddress": {
      "Description": "Controls if the EC2 instance is assigned a public IP address",
      "Type": "String",
      "Default": "true",
      "AllowedValues": [
        "true",
        "false"
      ],
      "ConstraintDescription": "Must be 'true' or 'false'."
    },
    "BitbucketProperties": {
      "Description": "A comma-separated list of bitbucket properties in the form key1=value1, key2=value2, ... Find documentation at https://confluence.atlassian.com/x/m5ZKLg",
      "Type": "CommaDelimitedList",
      "Default": ""
    },
    "BitbucketVersion": {
      "Description": "Version of Bitbucket, or 'latest' for the latest public release",
      "Type": "String",
      "Default": "latest",
      "AllowedPattern": "(\\d+\\.\\d+\\.\\d+(-?.*))|latest",
      "ConstraintDescription": "Must be a valid Bitbucket version number, or 'latest' for the latest public release."
    },
    "CatalinaOpts": {
      "Description": "Java options passed to the JVM that runs Bitbucket.",
      "Type": "String",
      "Default": ""
    },
    "CidrBlock": {
      "Description": "The CIDR IP range that is permitted to access Bitbucket. Use 0.0.0.0/0 if you want public access from the internet.",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "EbsOptimized": {
      "Type": "String",
      "Default": "true",
      "AllowedValues": [
        "true",
        "false"
      ],
      "ConstraintDescription": "Must be 'true' or 'false'."
    },
    "HomeDeleteOnTermination": {
      "Description": "Delete home directory volume when the instance is terminated.  You must back up your data before terminating your instance if this option is set to 'true'!",
      "Type": "String",
      "Default": "true",
      "AllowedValues": [
        "true",
        "false"
      ],
      "ConstraintDescription": "Must be 'true' or 'false'."
    },
    "HomeIops": {
      "Description": "Home directory IOPS (100 - 20000, only used with Provisioned IOPS).  Note: The ratio of IOPS provisioned to the volume size requested can be a maximum of 50; for example, a volume with 5000 IOPS must be at least 100 GiB",
      "Type": "Number",
      "Default": "100",
      "MinValue": "100",
      "MaxValue": "20000",
      "ConstraintDescription": "Must be in the range 100 - 20000."
    },
    "HomeSize": {
      "Description": "Home directory storage size, in gibibytes (GiB) (100 - 16384)",
      "Type": "Number",
      "Default": "100",
      "MinValue": "100",
      "MaxValue": "16384",
      "ConstraintDescription": "Must be in the range 100 - 16384."
    },
    "HomeVolumeSnapshotId": {
      "Description": "EBS snapshot ID of an existing backup to restore as the home directory. Leave blank for a new instance",
      "Type": "String",
      "Default": "",
      "ConstraintDescription": "Must be a valid EBS snapshot ID"
    },
    "HomeVolumeType": {
      "Type": "String",
      "Default": "General Purpose (SSD)",
      "AllowedValues": [
        "General Purpose (SSD)",
        "Provisioned IOPS"
      ],
      "ConstraintDescription": "Must be 'General Purpose (SSD)' or 'Provisioned IOPS'."
    },
    "InstanceType": {
      "Description": "EC2 Instance type. See https://confluence.atlassian.com/x/GpdKLg for guidance",
      "Type": "String",
      "Default": "c3.xlarge",
      "AllowedValues": [
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "hs1.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge"
      ],
      "ConstraintDescription": "Must be a valid EC2 HVM instance type. 'large' or larger."
    },
    "KeyName": {
      "Description": "The EC2 Key Pair to allow SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "Must be the name of an existing EC2 Key Pair."
    },
    "RootIops": {
      "Description": "Root volume IOPS (100 - 20000, only used with Provisioned IOPS).  Note: The ratio of IOPS provisioned to the volume size requested can be a maximum of 50; for example, a volume with 5000 IOPS must be at least 100 GiB",
      "Type": "Number",
      "Default": "100",
      "MinValue": "100",
      "MaxValue": "20000",
      "ConstraintDescription": "Must be in the range 100 - 20000."
    },
    "RootSize": {
      "Description": "Root volume storage size, in gibibytes (GiB) (50 - 16384)",
      "Type": "Number",
      "Default": "50",
      "MinValue": "50",
      "MaxValue": "16384",
      "ConstraintDescription": "Must be in the range 50 - 16384."
    },
    "RootVolumeType": {
      "Type": "String",
      "Default": "General Purpose (SSD)",
      "AllowedValues": [
        "General Purpose (SSD)",
        "Provisioned IOPS"
      ],
      "ConstraintDescription": "Must be 'General Purpose (SSD)' or 'Provisioned IOPS'."
    },
    "SSLCertificate": {
      "Type": "String",
      "Default": "None",
      "AllowedValues": [
        "None",
        "Generate a self-signed certificate"
      ],
      "ConstraintDescription": "Must be 'None' or 'Generate a self-signed certificate'."
    },
    "StartCollectd": {
      "Description": "Should the collectd service be started",
      "Type": "String",
      "Default": "false",
      "AllowedValues": [
        "true",
        "false"
      ],
      "ConstraintDescription": "Must be 'true' or 'false'"
    },
    "Subnet": {
      "Description": "Subnet within the selected VPC",
      "Type": "AWS::EC2::Subnet::Id",
      "ConstraintDescription": "Must be the ID of a Subnet within the selected VPC."
    },
    "VPC": {
      "Description": "Virtual Private Cloud",
      "Type": "AWS::EC2::VPC::Id",
      "ConstraintDescription": "Must be the ID of a VPC."
    }
  },
  "Conditions": {
    "DoCollectd": {
      "Fn::Equals": [
        {
          "Ref": "StartCollectd"
        },
        "true"
      ]
    },
    "DoGenerateSSLCert": {
      "Fn::Equals": [
        {
          "Ref": "SSLCertificate"
        },
        "Generate a self-signed certificate"
      ]
    },
    "DoRestoreFromSnapshot": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "HomeVolumeSnapshotId"
            },
            ""
          ]
        }
      ]
    },
    "IsEbsOptimized": {
      "Fn::Equals": [
        {
          "Ref": "EbsOptimized"
        },
        "true"
      ]
    },
    "IsHomeProvisionedIops": {
      "Fn::Equals": [
        {
          "Ref": "HomeVolumeType"
        },
        "Provisioned IOPS"
      ]
    },
    "IsPublicInstance": {
      "Fn::Equals": [
        {
          "Ref": "AssociatePublicIpAddress"
        },
        "true"
      ]
    },
    "IsRootProvisionedIops": {
      "Fn::Equals": [
        {
          "Ref": "RootVolumeType"
        },
        "Provisioned IOPS"
      ]
    }
  },
  "Mappings": {
    "AWSInstanceType2Arch": {
      "m3.large": {
        "Arch": "HVM64"
      },
      "m3.xlarge": {
        "Arch": "HVM64"
      },
      "m3.2xlarge": {
        "Arch": "HVM64"
      },
      "m4.large": {
        "Arch": "HVM64"
      },
      "m4.xlarge": {
        "Arch": "HVM64"
      },
      "m4.2xlarge": {
        "Arch": "HVM64"
      },
      "c3.large": {
        "Arch": "HVM64"
      },
      "c3.xlarge": {
        "Arch": "HVM64"
      },
      "c3.2xlarge": {
        "Arch": "HVM64"
      },
      "c3.4xlarge": {
        "Arch": "HVM64"
      },
      "c3.8xlarge": {
        "Arch": "HVM64"
      },
      "c4.large": {
        "Arch": "HVM64"
      },
      "c4.xlarge": {
        "Arch": "HVM64"
      },
      "c4.2xlarge": {
        "Arch": "HVM64"
      },
      "c4.4xlarge": {
        "Arch": "HVM64"
      },
      "c4.8xlarge": {
        "Arch": "HVM64"
      },
      "g2.2xlarge": {
        "Arch": "HVMG2"
      },
      "r3.large": {
        "Arch": "HVM64"
      },
      "r3.xlarge": {
        "Arch": "HVM64"
      },
      "r3.2xlarge": {
        "Arch": "HVM64"
      },
      "r3.4xlarge": {
        "Arch": "HVM64"
      },
      "r3.8xlarge": {
        "Arch": "HVM64"
      },
      "i2.xlarge": {
        "Arch": "HVM64"
      },
      "i2.2xlarge": {
        "Arch": "HVM64"
      },
      "i2.4xlarge": {
        "Arch": "HVM64"
      },
      "i2.8xlarge": {
        "Arch": "HVM64"
      },
      "hi1.4xlarge": {
        "Arch": "HVM64"
      },
      "hs1.8xlarge": {
        "Arch": "HVM64"
      },
      "cr1.8xlarge": {
        "Arch": "HVM64"
      },
      "cc2.8xlarge": {
        "Arch": "HVM64"
      }
    },
    "AWSRegionArch2AMI": {
      "us-east-1": {
        "HVM64": "ami-21640b5e",
        "HVMG2": "NOT_SUPPORTED"
      },
      "ap-south-1": {
        "HVM64": "ami-edad8282",
        "HVMG2": "NOT_SUPPORTED"
      },
      "eu-west-3": {
        "HVM64": "ami-295ced54",
        "HVMG2": "NOT_SUPPORTED"
      },
      "eu-west-2": {
        "HVM64": "ami-7d0de11a",
        "HVMG2": "NOT_SUPPORTED"
      },
      "eu-west-1": {
        "HVM64": "ami-acab90d5",
        "HVMG2": "NOT_SUPPORTED"
      },
      "ap-northeast-2": {
        "HVM64": "ami-e2ba118c",
        "HVMG2": "NOT_SUPPORTED"
      },
      "ap-northeast-1": {
        "HVM64": "ami-d715eda8",
        "HVMG2": "NOT_SUPPORTED"
      },
      "sa-east-1": {
        "HVM64": "ami-55faa439",
        "HVMG2": "NOT_SUPPORTED"
      },
      "ca-central-1": {
        "HVM64": "ami-79e1621d",
        "HVMG2": "NOT_SUPPORTED"
      },
      "ap-southeast-1": {
        "HVM64": "ami-50b8872c",
        "HVMG2": "NOT_SUPPORTED"
      },
      "ap-southeast-2": {
        "HVM64": "ami-fb6cbf99",
        "HVMG2": "NOT_SUPPORTED"
      },
      "eu-central-1": {
        "HVM64": "ami-9c6e5b77",
        "HVMG2": "NOT_SUPPORTED"
      },
      "us-east-2": {
        "HVM64": "ami-497a452c",
        "HVMG2": "NOT_SUPPORTED"
      },
      "us-west-1": {
        "HVM64": "ami-5eb9a23e",
        "HVMG2": "NOT_SUPPORTED"
      },
      "us-west-2": {
        "HVM64": "ami-6e413a16",
        "HVMG2": "NOT_SUPPORTED"
      }
    }
  },
  "Resources": {
    "BitbucketBackupRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "BitbucketBackupPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": [
                    "ec2:AttachVolume",
                    "ec2:CreateSnapshot",
                    "ec2:CreateTags",
                    "ec2:CreateVolume",
                    "ec2:DeleteSnapshot",
                    "ec2:DescribeSnapshots",
                    "ec2:DescribeVolumes",
                    "ec2:DetachVolume"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "*"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "BitbucketInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "BitbucketBackupRole"
          }
        ]
      }
    },
    "SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Security group allowing SSH and HTTP/HTTPS access",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "CidrBlock"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": {
              "Ref": "CidrBlock"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": {
              "Ref": "CidrBlock"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "7999",
            "ToPort": "7999",
            "CidrIp": {
              "Ref": "CidrBlock"
            }
          }
        ]
      }
    },
    "BitbucketServer": {
      "Type": "AWS::EC2::Instance",
      "Metadata": {
        "Comment": "Launch Bitbucket Server with an IAM Role that allows DIY Backup",
        "AWS::CloudFormation::Init": {
          "configSets": {
            "default": [
              "1"
            ]
          },
          "1": {
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]\n",
                      "stack=",
                      {
                        "Ref": "AWS::StackId"
                      },
                      "\n",
                      "region=",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                },
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.BitbucketServer.Metadata.AWS::CloudFormation::Init\n",
                      "action=/opt/aws/bin/cfn-init -v ",
                      "         --stack ",
                      {
                        "Ref": "AWS::StackName"
                      },
                      "         --resource BitbucketServer ",
                      "         --region ",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n",
                      "runas=root\n"
                    ]
                  ]
                }
              },
              "/etc/atl": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "ATL_BITBUCKET_VERSION=",
                      {
                        "Ref": "BitbucketVersion"
                      },
                      "\n",
                      "ATL_BITBUCKET_PROPERTIES=\"",
                      {
                        "Fn::Join": [
                          "\n",
                          {
                            "Ref": "BitbucketProperties"
                          }
                        ]
                      },
                      "\"\n",
                      {
                        "Fn::If": [
                          "DoGenerateSSLCert",
                          "ATL_SSL_SELF_CERT_ENABLED=true\n",
                          {
                            "Ref": "AWS::NoValue"
                          }
                        ]
                      },
                      {
                        "Fn::Join": [
                          "\n",
                          {
                            "Ref": "AMIOpts"
                          }
                        ]
                      }
                    ]
                  ]
                }
              },
              "/home/atlbitbucket/.bash_profile": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "if [ -f ~/.bashrc ]; then\n",
                      "    . ~/.bashrc\n",
                      "fi\n",
                      "export CATALINA_OPTS=\"",
                      {
                        "Ref": "CatalinaOpts"
                      },
                      "\"\n"
                    ]
                  ]
                },
                "mode": "000644",
                "owner": "atlbitbucket",
                "group": "atlbitbucket"
              },
              "/opt/atlassian/bitbucket-diy-backup/bitbucket.diy-backup.vars.sh": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "# This file was generated from the BitbucketServer CloudFormation template\n",
                      {
                        "Fn::Join": [
                          "",
                          [
                            "INSTANCE_NAME=",
                            {
                              "Ref": "AWS::StackName"
                            },
                            "\n"
                          ]
                        ]
                      },
                      "BITBUCKET_URL=http://localhost:7990\n",
                      "BITBUCKET_HOME=/media/atl/bitbucket\n",
                      "BITBUCKET_UID=atlbitbucket\n",
                      "BITBUCKET_GID=atlbitbucket\n",
                      "BACKUP_HOME_TYPE=amazon-ebs\n",
                      "BACKUP_DATABASE_TYPE=postgresql-fslevel\n",
                      "BACKUP_ARCHIVE_TYPE=\n",
                      "BACKUP_ZERO_DOWNTIME=true\n",
                      "HOME_DIRECTORY_MOUNT_POINT=/media/atl\n",
                      "HOME_DIRECTORY_DEVICE_NAME=/dev/sdf\n",
                      {
                        "Fn::Join": [
                          "",
                          [
                            "RESTORE_HOME_DIRECTORY_VOLUME_TYPE=",
                            {
                              "Fn::If": [
                                "IsHomeProvisionedIops",
                                "io1",
                                "gp2"
                              ]
                            },
                            "\n"
                          ]
                        ]
                      },
                      {
                        "Fn::If": [
                          "IsHomeProvisionedIops",
                          {
                            "Fn::Join": [
                              "",
                              [
                                "RESTORE_HOME_DIRECTORY_IOPS=",
                                {
                                  "Ref": "HomeIops"
                                },
                                "\n"
                              ]
                            ]
                          },
                          {
                            "Ref": "AWS::NoValue"
                          }
                        ]
                      },
                      "FILESYSTEM_TYPE=zfs\n",
                      "ZFS_HOME_TANK_NAME=$(run sudo zfs list -H -o name,mountpoint | grep \"${HOME_DIRECTORY_MOUNT_POINT}\" | cut -f1)\n",
                      "CURL_OPTIONS=\"-L -s -f\"\n",
                      {
                        "Fn::Join": [
                          "",
                          [
                            "AWS_REGION=",
                            {
                              "Ref": "AWS::Region"
                            },
                            "\n"
                          ]
                        ]
                      },
                      "AWS_INFO=$(curl ${CURL_OPTIONS} http://169.254.169.254/latest/dynamic/instance-identity/document)\n",
                      "AWS_AVAILABILITY_ZONE=$(echo \"${AWS_INFO}\" | jq -r .availabilityZone)\n",
                      "AWS_REGION=$(echo \"${AWS_INFO}\" | jq -r .region)\n",
                      "AWS_EC2_INSTANCE_ID=$(echo \"${AWS_INFO}\" | jq -r .instanceId)\n",
                      "AWS_ADDITIONAL_TAGS=\n",
                      "BITBUCKET_VERBOSE_BACKUP=${BITBUCKET_VERBOSE_BACKUP:-true}\n",
                      "KEEP_BACKUPS=5\n",
                      "POSTGRESQL_SERVICE_NAME=postgresql\"${psql_major}\""
                    ]
                  ]
                },
                "mode": "000644",
                "owner": "ec2-user",
                "group": "ec2-user"
              }
            },
            "packages": {
              "Fn::If": [
                "DoCollectd",
                {
                  "yum": {
                    "collectd": [],
                    "collectd-java": [],
                    "collectd-generic-jmx": [],
                    "collectd-rrdtool": []
                  }
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "services": {
              "sysvinit": {
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                  ]
                },
                "collectd": {
                  "enabled": {
                    "Fn::If": [
                      "DoCollectd",
                      "true",
                      "false"
                    ]
                  },
                  "ensureRunning": {
                    "Fn::If": [
                      "DoCollectd",
                      "true",
                      "false"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "Properties": {
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "VolumeType": {
                "Fn::If": [
                  "IsRootProvisionedIops",
                  "io1",
                  "gp2"
                ]
              },
              "Iops": {
                "Fn::If": [
                  "IsRootProvisionedIops",
                  {
                    "Ref": "RootIops"
                  },
                  {
                    "Ref": "AWS::NoValue"
                  }
                ]
              },
              "DeleteOnTermination": "true",
              "VolumeSize": {
                "Ref": "RootSize"
              }
            }
          },
          {
            "DeviceName": "/dev/sdf",
            "Ebs": {
              "VolumeType": {
                "Fn::If": [
                  "IsHomeProvisionedIops",
                  "io1",
                  "gp2"
                ]
              },
              "Iops": {
                "Fn::If": [
                  "IsHomeProvisionedIops",
                  {
                    "Ref": "HomeIops"
                  },
                  {
                    "Ref": "AWS::NoValue"
                  }
                ]
              },
              "DeleteOnTermination": {
                "Ref": "HomeDeleteOnTermination"
              },
              "SnapshotId": {
                "Fn::If": [
                  "DoRestoreFromSnapshot",
                  {
                    "Ref": "HomeVolumeSnapshotId"
                  },
                  {
                    "Ref": "AWS::NoValue"
                  }
                ]
              },
              "VolumeSize": {
                "Ref": "HomeSize"
              }
            }
          },
          {
            "DeviceName": "/dev/xvdf",
            "NoDevice": {}
          }
        ],
        "EbsOptimized": {
          "Fn::If": [
            "IsEbsOptimized",
            true,
            false
          ]
        },
        "IamInstanceProfile": {
          "Ref": "BitbucketInstanceProfile"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionArch2AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "AWSInstanceType2Arch",
                {
                  "Ref": "InstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "NetworkInterfaces": [
          {
            "GroupSet": [
              {
                "Ref": "SecurityGroup"
              }
            ],
            "AssociatePublicIpAddress": {
              "Ref": "AssociatePublicIpAddress"
            },
            "DeviceIndex": "0",
            "DeleteOnTermination": "true",
            "SubnetId": {
              "Ref": "Subnet"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xe\n",
                "yum update -y aws-cfn-bootstrap\n",
                "/opt/aws/bin/cfn-init -v ",
                "         --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource BitbucketServer ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "/opt/aws/bin/cfn-signal -e $? ",
                "         --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource BitbucketServer ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n"
              ]
            ]
          }
        }
      }
    }
  },
  "Outputs": {
    "URL": {
      "Description": "The public URL of the Bitbucket Server instance",
      "Value": {
        "Fn::Join": [
          "",
          [
            {
              "Fn::If": [
                "DoGenerateSSLCert",
                "https",
                "http"
              ]
            },
            "://",
            {
              "Fn::If": [
                "IsPublicInstance",
                {
                  "Fn::GetAtt": [
                    "BitbucketServer",
                    "PublicDnsName"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "BitbucketServer",
                    "PrivateIp"
                  ]
                }
              ]
            }
          ]
        ]
      }
    },
    "PublicIp": {
      "Description": "The public IP address of the Bitbucket Server instance",
      "Value": {
        "Fn::If": [
          "IsPublicInstance",
          {
            "Fn::GetAtt": [
              "BitbucketServer",
              "PublicIp"
            ]
          },
          ""
        ]
      }
    },
    "PrivateIp": {
      "Description": "The private IP address of the Bitbucket Server instance",
      "Value": {
        "Fn::GetAtt": [
          "BitbucketServer",
          "PrivateIp"
        ]
      }
    }
  }
}
