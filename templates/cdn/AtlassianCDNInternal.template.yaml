---
AWSTemplateFormatVersion: "2010-09-09"
Description: 'Example of Atlassian CDN distribution for private network. Please read documentation on TODO'
Parameters:
  ServiceUrl:
    Description: (required) Application URL used for the origin of the content including protocol. You can find this value
      in the Outputs section of Atlassian CloudFormation templates.
    MinLength: 3
    Type: String
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
  ExternalSubnets:
    Type: List<AWS::EC2::Subnet::Id>
  InstanceId:
    Type: AWS::EC2::Instance::Id
  VPC:
    Type: AWS::EC2::VPC::Id
  ApplicationContextPath:
    Default: ''
    Description: '(optional) The context path of this web application, which is matched against the beginning of each
      request URI to select the appropriate web application for processing. If used, must include leading "/" and should
      not contain a trailing slash "/". For example: "/confluence"'
    Type: String
Conditions:
  UseHTTP: !Equals ['http', !Select ['0', !Split ["://", !Ref ServiceUrl]]]
Resources:
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '300'
      Scheme: internet-facing
      SecurityGroups: [!Ref SecurityGroup]
      Subnets: !Ref ExternalSubnets
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-LoadBalancer"
        - Key: Cluster
          Value: !Ref AWS::StackName
  MainTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Join ['-', [!Ref 'AWS::StackName', !Select [2, !Split ['-', !GetAtt LoadBalancer.LoadBalancerName]]]]
      Port: 8080
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckIntervalSeconds: 20
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: '200'
      HealthCheckPath: !Sub '${ApplicationContextPath}/status'
      HealthCheckPort: 8080
      HealthCheckProtocol: HTTP
      Targets:
        - Id: !Ref InstanceId
          Port: 8080
      Tags:
        - Key: Name
          Value: MainTargetGroup
        - Key: Cluster
          Value: !Ref AWS::StackName
    DependsOn:
      - LoadBalancer
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MainTargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
  WebACLWAF:
    Type: "AWS::WAFRegional::WebACL"
    Properties:
      Name: "Atlassian WebACL for ALB"
      DefaultAction:
        Type: "BLOCK"
      MetricName: "AtlassianWebACLALB"
      Rules:
        - Action:
            Type: "ALLOW"
          Priority: 1
          RuleId:
            Ref: "ConfluenceRuleAllowStatic"
  ConfluenceWebACLALBAssociation:
    Type: "AWS::WAFRegional::WebACLAssociation"
    Properties:
      ResourceArn: !Ref LoadBalancer
      WebACLId:
        Ref: WebACLWAF
  ConfluenceRuleAllowStatic:
    Type: "AWS::WAFRegional::Rule"
    Properties:
      Name: "WAF rule to allow static assets"
      MetricName: "ConfluenceRuleAllowStatic"
      Predicates:
        - DataId:
            Ref: "ConfluenceConditionStaticContent"
          Negated: true
          Type: "ByteMatch"
  ConfluenceConditionStaticContent:
    Type: "AWS::WAFRegional::ByteMatchSet"
    Properties:
      Name: "Condition matching URIs for static content"
      ByteMatchTuples:
        - FieldToMatch:
            Type: "URI"
          TargetString: !Sub '${ApplicationContextPath}/s/'
          TextTransformation: "NONE"
          PositionalConstraint: "STARTS_WITH"
  CloudFrontCDN:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        DefaultCacheBehavior:
          ForwardedValues:
            Headers:
              - Origin
              - Accept
            QueryString: true
          TargetOriginId: !Sub ['${domainName}-origin-id', {domainName: !Select ['1', !Split ["://", !Ref ServiceUrl]]}]
          ViewerProtocolPolicy: allow-all
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Origins:
          - Id: !Sub ['${domainName}-origin-id', {domainName: !Select ['1', !Split ["://", !Ref ServiceUrl]]}]
            DomainName: !Select ['1', !Split ["://", !Ref ServiceUrl]]
            CustomOriginConfig:
              OriginProtocolPolicy: match-viewer
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} CloudFront'
Outputs:
  CDNDomainName:
    Description: This is the domain name for the Atlassian CDN
    Value: !GetAtt 'CloudFrontCDN.DomainName'
