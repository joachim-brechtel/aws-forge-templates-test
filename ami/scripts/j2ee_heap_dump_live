#!/bin/bash
#
# Run this script with root privileges and it will take a live heap dump from a
# healthy JVM.
#
# Add `--no-gc` to take a heap dump without a full GC preceding it
#

remove_incomplete_dump() {
    RC=$?
    if [ ! -z "$JVM_HEAP" ] && [ -f "$JVM_HEAP" ] ; then
        echo "Removing incomplete heap dump $JVM_HEAP"
        /bin/rm -f $JVM_HEAP
    fi
    exit $RC
}

BASEDIR="$(cd "$(dirname "$0")" && pwd)"
. ${BASEDIR}/j2ee_tools_common.sh

if [ -z "$TMPDIR" ] ; then
    echo "Required variable TMPDIR is undefined"
    exit 1
fi

if [ ! -d "$TMPDIR" ] ; then
    echo "$TMPDIR is missing!"
    exit 1
fi

JAVA=${SERVICE_JAVA_HOME}/bin/java
if [ ! -f ${SERVICE_JAVA_HOME}/bin/jmap ]; then
  SERVICE_JAVA_HOME=$(dirname $(dirname $(which jmap)))
fi
JVM_HEAP=${TMPDIR}/${SERVICE_NAME}_$(date +%Y%m%d_%H%M%S).hprof

if [ "x$1" == "x--no-gc" ]; then
    JMAP_OPTS="-dump:format=b,file=${JVM_HEAP} $SERVICE_PID"
else
    JMAP_OPTS="-dump:live,format=b,file=${JVM_HEAP} $SERVICE_PID"
fi

echo "Service PID: $SERVICE_PID"
echo "Service User: $PROCUSER"

echo "Creating live heap dump..."
echo "cmdline: jmap $JMAP_OPTS"
trap remove_incomplete_dump INT TERM EXIT
if [ "$LOGNAME" = "$PROCUSER" ] ; then
    JMAP_OUT=$(${SERVICE_JAVA_HOME}/bin/jmap $JMAP_OPTS)
elif [[ "$UID" -eq 0 ]]; then
    chown $PROCUSER $TMPDIR
    JMAP_OUT=$(sudo -u $PROCUSER ${SERVICE_JAVA_HOME}/bin/jmap $JMAP_OPTS)
else
    echo "This script must be run with root privileges or the app user - bailing out."
    exit 1
fi
if [ $? != 0 ] ; then
    echo "Unable to create a heap dump at $JVM_HEAP"
    exit 1
fi
if [[ $JMAP_OUT =~ .*No\ space\ left\ on\ device.* ]] || [[ $JMAP_OUT =~ .*file\ size\ limit.* ]] ; then
    echo "ERROR: Ran out of space in $TMPDIR"
    exit 1
fi
trap - INT TERM EXIT

update_permission $JVM_HEAP

PIGZ=/usr/bin/pigz
if [ -x "$PIGZ" ] ; then
    echo "Compressing $JVM_HEAP"
    nice -19 $PIGZ $JVM_HEAP
    JVM_HEAP=$JVM_HEAP.gz
fi
echo "Heap dump created at $JVM_HEAP"
