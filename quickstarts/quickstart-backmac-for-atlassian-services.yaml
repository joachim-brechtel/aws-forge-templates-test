AWSTemplateFormatVersion: 2010-09-09
Description: Backmac (Backup Machine)

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Backmac Basics
        Parameters:
          - BackmacDRRegion
          - BackupSchedule
      - Label:
          default: Backupmachine node
        Parameters:
          - NodeInstanceType
      - Label:
          default: Networking
        Parameters:
          - AccessCIDR
          - AssociatePublicIpAddress
          - InternalSubnets
          - KeyName
          - VPC
      - Label:
          default: Integrations
        Parameters:
          - WebhookNotificationURL
      - Label:
          default: Advanced
        Parameters:
          - S3LambdaBucketPrefix
          - S3LambdaBucketFolder
    ParameterLabels:
      AccessCIDR:
        default: Permitted IP range
      AssociatePublicIpAddress:
        default: Assign public IP
      BackmacDRRegion:
        default: Region to copy snapshots to
      BackupSchedule:
        default: A cron based backup schedule to run backups (in UTC).
      InternalSubnets:
        default: Internal subnets *
      KeyName:
        default: Key Name *
      NodeInstanceType:
        default: Backupmachine node instance type
      S3LambdaBucketFolder:
        default: The 'folder' within the S3 bucket to find the lambdas.
      S3LambdaBucketPrefix:
        default: The S3 bucket prefix where the lambdas can be found (will be appending with '-region')
      VPC:
        default: VPC *
Parameters:
  AccessCIDR:
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.
    Description: The CIDR IP range that is permitted to access the Backupmachine. Use 0.0.0.0/0 if you want public access from the internet.
    MaxLength: 18
    MinLength: 9
    Type: String
  AssociatePublicIpAddress:
    Default: false
    AllowedValues:
      - true
      - false
    ConstraintDescription: Must be 'true' or 'false'.
    Description: Controls if the EC2 instances are assigned a public IP address
    Type: String
  BackmacDRRegion:
    Default: us-east-1
    AllowedValues:
      - ap-northeast-1
      - ap-northeast-2
      - ap-south-1
      - ap-southeast-1
      - ap-southeast-2
      - ca-central-1
      - eu-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - sa-east-1
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
    Description: Must be a valid AWS region.
    Type: String
  BackupSchedule:
    Default: 0 0 * * ? *
    AllowedPattern: '^\s*($|#|\w+\s*=|(\?|\*|(?:[0-5]?\d)(?:(?:-|\/|\,)(?:[0-5]?\d))?(?:,(?:[0-5]?\d)(?:(?:-|\/|\,)(?:[0-5]?\d))?)*)\s+(\?|\*|(?:[0-5]?\d)(?:(?:-|\/|\,)(?:[0-5]?\d))?(?:,(?:[0-5]?\d)(?:(?:-|\/|\,)(?:[0-5]?\d))?)*)\s+(\?|\*|(?:[01]?\d|2[0-3])(?:(?:-|\/|\,)(?:[01]?\d|2[0-3]))?(?:,(?:[01]?\d|2[0-3])(?:(?:-|\/|\,)(?:[01]?\d|2[0-3]))?)*)\s+(\?|\*|(?:0?[1-9]|[12]\d|3[01])(?:(?:-|\/|\,)(?:0?[1-9]|[12]\d|3[01]))?(?:,(?:0?[1-9]|[12]\d|3[01])(?:(?:-|\/|\,)(?:0?[1-9]|[12]\d|3[01]))?)*)\s+(\?|\*|(?:[1-9]|1[012])(?:(?:-|\/|\,)(?:[1-9]|1[012]))?(?:L|W)?(?:,(?:[1-9]|1[012])(?:(?:-|\/|\,)(?:[1-9]|1[012]))?(?:L|W)?)*|\?|\*|(?:JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC)(?:(?:-)(?:JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC))?(?:,(?:JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC)(?:(?:-)(?:JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC))?)*)\s+(\?|\*|(?:[0-6])(?:(?:-|\/|\,|#)(?:[0-6]))?(?:L)?(?:,(?:[0-6])(?:(?:-|\/|\,|#)(?:[0-6]))?(?:L)?)*|\?|\*|(?:MON|TUE|WED|THU|FRI|SAT|SUN)(?:(?:-)(?:MON|TUE|WED|THU|FRI|SAT|SUN))?(?:,(?:MON|TUE|WED|THU|FRI|SAT|SUN)(?:(?:-)(?:MON|TUE|WED|THU|FRI|SAT|SUN))?)*)(|\s)+(\?|\*|(?:|\d{4})(?:(?:-|\/|\,)(?:|\d{4}))?(?:,(?:|\d{4})(?:(?:-|\/|\,)(?:|\d{4}))?)*))$'
    Description: A cron based backup schedule to run backups (in UTC).
    Type: String
  InternalSubnets:
    ConstraintDescription: Must be a list of two or more Subnet IDs within the selected VPC.
    Description: Subnets (two or more) where your cluster nodes and other internal infrastructure will be deployed. MUST be within the selected VPC.
    Type: List<AWS::EC2::Subnet::Id>
  KeyName:
    ConstraintDescription: Must be the name of an existing EC2 Key Pair.
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
  NodeInstanceType:
    Default: c5.xlarge
    AllowedValues:
      - c5.18xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.large
      - c5.xlarge
      - c5d.18xlarge
      - c5d.2xlarge
      - c5d.4xlarge
      - c5d.9xlarge
      - c5d.large
      - c5d.xlarge
      - h1.16xlarge
      - h1.2xlarge
      - h1.4xlarge
      - h1.8xlarge
      - i3.16xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.large
      - i3.metal
      - i3.xlarge
      - m5.12xlarge
      - m5.24xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.large
      - m5.xlarge
      - m5d.12xlarge
      - m5d.24xlarge
      - m5d.2xlarge
      - m5d.4xlarge
      - m5d.large
      - m5d.xlarge
      - r4.16xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r4.large
      - r4.xlarge
    ConstraintDescription: Must be one of the provided instance types
    Description: Backupmachine node instance type.
    Type: String
  S3LambdaBucketFolder:
    Default: 'master'
    Description: The folder within the S3 bucket to look for Lambdas and other Quick Start assets. Don't include a trailing slash.
    Type: String
  S3LambdaBucketPrefix:
    Default: 'atlassian-aws-lambdaresources'
    Description: S3 bucket name for the Quick Start assets. Quick Start bucket name
      can include numbers, lowercase letters, uppercase letters, and hyphens (-).
      It cannot start or end with a hyphen (-).
    Type: String
  WebhookNotificationURL:
    Default: ''
    Description: The Webhook Notification URL to post to
    Type: String
  VPC:
     ConstraintDescription: Must be the ID of a VPC.
     Description: Virtual Private Cloud
     Type: AWS::EC2::VPC::Id

Mappings:
  AWSRegionArch2AMI:
    ap-northeast-1:
      HVM64: ami-094524ca01aa224d2
    ap-northeast-2:
      HVM64: ami-07d5665d0c129d8b7
    ap-south-1:
      HVM64: ami-0d7b208dc5b0fe76a
    ap-southeast-1:
      HVM64: ami-0f248bcac6ff5bc17
    ap-southeast-2:
      HVM64: ami-01ab4a3bc7e75f44a
    ca-central-1:
      HVM64: ami-0b18956f
    eu-central-1:
      HVM64: ami-0233214e13e500f77
    eu-north-1:
      HVM64: ami-4abe3234
    eu-west-1:
      HVM64: ami-047bb4163c506cd98
    eu-west-2:
      HVM64: ami-f976839e
    sa-east-1:
      HVM64: ami-07b14488da8ea02a0
    us-east-1:
      HVM64: ami-0ff8a91507f77f867
    us-east-2:
      HVM64: ami-0b59bfac6be064b78
    us-west-1:
      HVM64: ami-0bdb828fd58c52235
    us-west-2:
      HVM64: ami-a0cfeed8

Resources:
  BackmacNodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref BackmacRole]
  BackmacCommon:
    Type: "AWS::Lambda::LayerVersion"
    Properties:
      CompatibleRuntimes:
        - python3.6
        - python3.7
      Content:
        S3Bucket: !Join ['-', [!Ref S3LambdaBucketPrefix, !Ref 'AWS::Region']]
        S3Key: !Join ['/', [!Ref S3LambdaBucketFolder, backmac_common.zip]]
      Description: Common Backmac Functions
      LayerName: BackmacCommon
  backmacreadqueue:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: backmac_read_queue
      Handler: backmac_read_queue.lambda_handler
      Runtime: python3.6
      Code:
        S3Bucket: !Join ['-', [!Ref S3LambdaBucketPrefix, !Ref 'AWS::Region']]
        S3Key: !Join ['/', [!Ref S3LambdaBucketFolder, backmac_read_queue.py.zip]]
      Description: 'Reads the Backmac queue and looks for jobs'
      Environment:
        Variables:
          dr_region:  !Ref BackmacDRRegion
      MemorySize: 128
      Timeout: 30
      Role: !GetAtt [BackmacRole, Arn]
  backmacec2start:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Join ['-', [!Ref S3LambdaBucketPrefix, !Ref 'AWS::Region']]
        S3Key: !Join ['/', [!Ref S3LambdaBucketFolder, backmac_ec2_start.py.zip]]
      Description: 'Starts the Backmac EC2 node'
      FunctionName: backmac_ec2_start
      Handler: backmac_ec2_start.lambda_handler
      MemorySize: 128
      Role: !GetAtt [BackmacRole, Arn]
      Runtime: python3.6
      Timeout: 30
  backmacec2status:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Join ['-', [!Ref S3LambdaBucketPrefix, !Ref 'AWS::Region']]
        S3Key: !Join ['/', [!Ref S3LambdaBucketFolder, backmac_ec2_status.py.zip]]
      Description: 'Checks the status of the Backmac EC2 node'
      FunctionName: backmac_ec2_status
      Handler: backmac_ec2_status.lambda_handler
      MemorySize: 128
      Role: !GetAtt [BackmacRole, Arn]
      Runtime: python3.6
      Timeout: 30
  backmaccleanup:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Join ['-', [!Ref S3LambdaBucketPrefix, !Ref 'AWS::Region']]
        S3Key: !Join ['/', [!Ref S3LambdaBucketFolder, backmac_cleanup.py.zip]]
      Description: ''
      FunctionName: backmac_cleanup
      Handler: backmac_cleanup.lambda_handler
      MemorySize: 128
      Role: !GetAtt [BackmacRole, Arn]
      Runtime: python3.6
      Timeout: 300
  backmacmountefs:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Join ['-', [!Ref S3LambdaBucketPrefix, !Ref 'AWS::Region']]
        S3Key: !Join ['/', [!Ref S3LambdaBucketFolder, backmac_mount_efs.py.zip]]
      Description: mount EFS to backup machine
      FunctionName: backmac_mount_efs
      Handler: backmac_mount_efs.lambda_handler
      MemorySize: 128
      Role: !GetAtt [BackmacRole, Arn]
      Runtime: python3.6
      Timeout: 30
  backmacmountebs:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Join ['-', [!Ref S3LambdaBucketPrefix, !Ref 'AWS::Region']]
        S3Key: !Join ['/', [!Ref S3LambdaBucketFolder, backmac_mount_ebs.py.zip]]
      Description: ''
      FunctionName: backmac_mount_ebs
      Handler: backmac_mount_ebs.lambda_handler
      MemorySize: 128
      Role: !GetAtt [BackmacRole, Arn]
      Runtime: python3.6
      Timeout: 300
  backmacrdssnap:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Join ['-', [!Ref S3LambdaBucketPrefix, !Ref 'AWS::Region']]
        S3Key: !Join ['/', [!Ref S3LambdaBucketFolder, backmac_rds_snap.py.zip]]
      Description: ''
      FunctionName: backmac_rds_snap
      Handler: backmac_rds_snap.lambda_handler
      MemorySize: 128
      Role: !GetAtt [BackmacRole, Arn]
      Runtime: python3.6
      Timeout: 30
  backmacefs2ebs:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Join ['-', [!Ref S3LambdaBucketPrefix, !Ref 'AWS::Region']]
        S3Key: !Join ['/', [!Ref S3LambdaBucketFolder, backmac_efs2ebs.py.zip]]
      Description: ''
      FunctionName: backmac_efs2ebs
      Handler: backmac_efs2ebs.lambda_handler
      MemorySize: 128
      Role: !GetAtt [BackmacRole, Arn]
      Runtime: python3.6
      Timeout: 300
  backmacefs2ebsstatus:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Join ['-', [!Ref S3LambdaBucketPrefix, !Ref 'AWS::Region']]
        S3Key: !Join ['/', [!Ref S3LambdaBucketFolder, backmac_efs2ebs_status.py.zip]]
      Description: ''
      FunctionName: backmac_efs2ebs_status
      Handler: backmac_efs2ebs_status.lambda_handler
      MemorySize: 128
      Role: !GetAtt [BackmacRole, Arn]
      Runtime: python3.6
      Timeout: 30
  backmacebssnap:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Join ['-', [!Ref S3LambdaBucketPrefix, !Ref 'AWS::Region']]
        S3Key: !Join ['/', [!Ref S3LambdaBucketFolder, backmac_ebs_snap.py.zip]]
      Description: ''
      FunctionName: backmac_ebs_snap
      Handler: backmac_ebs_snap.lambda_handler
      MemorySize: 128
      Role: !GetAtt [BackmacRole, Arn]
      Runtime: python3.6
      Timeout: 30
  backmacebsstatus:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Join ['-', [!Ref S3LambdaBucketPrefix, !Ref 'AWS::Region']]
        S3Key: !Join ['/', [!Ref S3LambdaBucketFolder, backmac_ebs_status.py.zip]]
      Description: ''
      FunctionName: backmac_ebs_status
      Handler: backmac_ebs_status.lambda_handler
      MemorySize: 128
      Role: !GetAtt [BackmacRole, Arn]
      Runtime: python3.6
      Timeout: 30
  backmacqueuenext:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Join ['-', [!Ref S3LambdaBucketPrefix, !Ref 'AWS::Region']]
        S3Key: !Join ['/', [!Ref S3LambdaBucketFolder, backmac_queue_next.py.zip]]
      Description: ''
      Environment:
        Variables:
          dr_region:  !Ref BackmacDRRegion
      FunctionName: backmac_queue_next
      Handler: backmac_queue_next.lambda_handler
      MemorySize: 128
      Role: !GetAtt [BackmacRole, Arn]
      Runtime: python3.6
      Timeout: 3
  backmacsnapstatus:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Join ['-', [!Ref S3LambdaBucketPrefix, !Ref 'AWS::Region']]
        S3Key: !Join ['/', [!Ref S3LambdaBucketFolder, backmac_snap_status.py.zip]]
      Description: have local snapshots completed?
      FunctionName: backmac_snap_status
      Handler: backmac_snap_status.lambda_handler
      MemorySize: 128
      Role: !GetAtt [BackmacRole, Arn]
      Runtime: python3.6
      Timeout: 15
  backmacebs2dr:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Join ['-', [!Ref S3LambdaBucketPrefix, !Ref 'AWS::Region']]
        S3Key: !Join ['/', [!Ref S3LambdaBucketFolder, backmac_ebs2dr.py.zip]]
      Description: ''
      FunctionName: backmac_ebs2dr
      Handler: backmac_ebs2dr.lambda_handler
      MemorySize: 128
      Role: !GetAtt [BackmacRole, Arn]
      Runtime: python3.6
      Timeout: 300
  backmacebs2drstatus:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Join ['-', [!Ref S3LambdaBucketPrefix, !Ref 'AWS::Region']]
        S3Key: !Join ['/', [!Ref S3LambdaBucketFolder, backmac_ebs2dr_status.py.zip]]
      Description: ''
      FunctionName: backmac_ebs2dr_status
      Handler: backmac_ebs2dr_status.lambda_handler
      MemorySize: 128
      Role: !GetAtt [BackmacRole, Arn]
      Runtime: python3.6
      Timeout: 60
  backmackmssetup:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Join ['-', [!Ref S3LambdaBucketPrefix, !Ref 'AWS::Region']]
        S3Key: !Join ['/', [!Ref S3LambdaBucketFolder, backmac_kms_setup.py.zip]]
      Description: ''
      FunctionName: backmac_kms_setup
      Handler: backmac_kms_setup.lambda_handler
      MemorySize: 128
      Role: !GetAtt [BackmacRole, Arn]
      Runtime: python3.6
      Timeout: 60
  backmacrds2dr:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Join ['-', [!Ref S3LambdaBucketPrefix, !Ref 'AWS::Region']]
        S3Key: !Join ['/', [!Ref S3LambdaBucketFolder, backmac_rds2dr.py.zip]]
      Description: ''
      FunctionName: backmac_rds2dr
      Handler: backmac_rds2dr.lambda_handler
      MemorySize: 128
      Role: !GetAtt [BackmacRole, Arn]
      Runtime: python3.6
      Timeout: 300
  backmacrds2drstatus:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Join ['-', [!Ref S3LambdaBucketPrefix, !Ref 'AWS::Region']]
        S3Key: !Join ['/', [!Ref S3LambdaBucketFolder, backmac_rds2dr_status.py.zip]]
      Description: ''
      FunctionName: backmac_rds2dr_status
      Handler: backmac_rds2dr_status.lambda_handler
      MemorySize: 128
      Role: !GetAtt [BackmacRole, Arn]
      Runtime: python3.6
      Timeout: 60
  backmacfail:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Join ['-', [!Ref S3LambdaBucketPrefix, !Ref 'AWS::Region']]
        S3Key: !Join ['/', [!Ref S3LambdaBucketFolder, backmac_fail.py.zip]]
      Description: ''
      Environment:
        Variables:
          webhook_notification_url: !Ref WebhookNotificationURL
      FunctionName: backmac_fail
      Handler: backmac_fail.lambda_handler
      Layers:
        - !Ref BackmacCommon
      MemorySize: 128
      Role: !GetAtt [BackmacRole, Arn]
      Runtime: python3.6
      Timeout: 3
  backmacsuccess:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Join ['-', [!Ref S3LambdaBucketPrefix, !Ref 'AWS::Region']]
        S3Key: !Join ['/', [!Ref S3LambdaBucketFolder, backmac_success.py.zip]]
      Description: ''
      Environment:
        Variables:
          webhook_notification_url: !Ref WebhookNotificationURL
      FunctionName: backmac_success
      Handler: backmac_success.lambda_handler
      Layers:
        - !Ref BackmacCommon
      MemorySize: 128
      Role: !GetAtt [BackmacRole, Arn]
      Runtime: python3.6
      Timeout: 3
  backmacruncomplete:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Join ['-', [!Ref S3LambdaBucketPrefix, !Ref 'AWS::Region']]
        S3Key: !Join ['/', [!Ref S3LambdaBucketFolder, backmac_runcomplete.py.zip]]
      Description: ''
      Environment:
        Variables:
          webhook_notification_url: !Ref WebhookNotificationURL
      FunctionName: backmac_runcomplete
      Handler: backmac_runcomplete.lambda_handler
      Layers:
        - !Ref BackmacCommon
      MemorySize: 128
      Role: !GetAtt [BackmacRole, Arn]
      Runtime: python3.6
      Timeout: 60
  backmacrequeuenotify:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Join ['-', [!Ref S3LambdaBucketPrefix, !Ref 'AWS::Region']]
        S3Key: !Join ['/', [!Ref S3LambdaBucketFolder, backmac_requeue_notify.py.zip]]
      Description: ''
      Environment:
        Variables:
          webhook_notification_url: !Ref WebhookNotificationURL
      FunctionName: backmac_requeue_notify
      Handler: backmac_requeue_notify.lambda_handler
      Layers:
        - !Ref BackmacCommon
      MemorySize: 128
      Role: !GetAtt [BackmacRole, Arn]
      Runtime: python3.6
      Timeout: 60
  backmacrequeuestack:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Join ['-', [!Ref S3LambdaBucketPrefix, !Ref 'AWS::Region']]
        S3Key: !Join ['/', [!Ref S3LambdaBucketFolder, backmac_requeue_stack.py.zip]]
      FunctionName: backmac_requeue_stack
      Handler: backmac_requeue_stack.lambda_handler
      Description: ''
      MemorySize: 128
      Role: !GetAtt [BackmacRole, Arn]
      Runtime: python3.6
      Timeout: 60
  backmacresizeebs:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Join ['-', [!Ref S3LambdaBucketPrefix, !Ref 'AWS::Region']]
        S3Key: !Join ['/', [!Ref S3LambdaBucketFolder, backmac_resize_ebs.py.zip]]
      Description: ''
      FunctionName: backmac_resize_ebs
      Handler: backmac_resize_ebs.lambda_handler
      MemorySize: 128
      Role: !GetAtt [BackmacRole, Arn]
      Runtime: python3.6
      Timeout: 300
  backmaccreateebs:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Join ['-', [!Ref S3LambdaBucketPrefix, !Ref 'AWS::Region']]
        S3Key: !Join ['/', [!Ref S3LambdaBucketFolder, backmac_create_ebs.py.zip]]
      Description: 'Creates an EBS volume'
      FunctionName: backmac_create_ebs
      Handler: backmac_create_ebs.lambda_handler
      MemorySize: 128
      Role: !GetAtt [BackmacRole, Arn]
      Runtime: python3.6
      Timeout: 60
  backmacrunbackups:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Join ['-', [!Ref S3LambdaBucketPrefix, !Ref 'AWS::Region']]
        S3Key: !Join ['/', [!Ref S3LambdaBucketFolder, backmac_runbackups.py.zip]]
      Description: 'Finds stacks to add to backup queue'
      Environment:
        Variables:
          webhook_notification_url: !Ref WebhookNotificationURL
          dr_region:  !Ref BackmacDRRegion
      FunctionName: backmac_runbackups
      Handler: backmac_runbackups.lambda_handler
      Layers:
        - !Ref BackmacCommon
      MemorySize: 128
      Role: !GetAtt [BackmacRole, Arn]
      Runtime: python3.6
      Timeout: 60
  backmacsnapshotcleaner:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Join ['-', [!Ref S3LambdaBucketPrefix, !Ref 'AWS::Region']]
        S3Key: !Join ['/', [!Ref S3LambdaBucketFolder, backmac_snapshot_cleaner.py.zip]]
      Description: 'Cleans up old snapshots from EBS & RDS based off their tags'
      FunctionName: backmac_snapshot_cleaner
      Handler: backmac_snapshot_cleaner.lambda_handler
      MemorySize: 128
      Role: !GetAtt [BackmacRole, Arn]
      Runtime: python3.6
      Timeout: 60
  # State Machine
  backmacstatemachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: backup_machine
      DefinitionString:
        Fn::Sub:
          - |-
            {
              "Comment": "Atlassian Service backup orchestration state machine",
              "StartAt": "read_backmac_queue",
              "States": {
                "read_backmac_queue": {
                  "Type": "Task",
                  "Catch": [
                    {
                      "ErrorEquals": ["KeyError"],
                      "Next": "BackupRunComplete"
                    },
                    {
                      "ErrorEquals": ["States.ALL"],
                      "Next": "FailNotification",
                      "ResultPath": "$.error"
                    }
                  ],
                  "Resource": "${backmac_read_queueArn}",
                  "Retry": [
                    {
                     "ErrorEquals": ["Lambda.ServiceException"],
                     "IntervalSeconds": 2,
                     "MaxAttempts": 6,
                     "BackoffRate": 2
                    }
                  ],
                  "Next": "ec2_start"
                },
                "ec2_start": {
                  "Type": "Task",
                  "Catch": [
                    {
                      "ErrorEquals": ["States.ALL"],
                      "Next": "FailNotification",
                      "ResultPath": "$.error"
                    }
                  ],
                  "Resource": "${backmac_ec2_startArn}",
                  "Retry": [
                    {
                     "ErrorEquals": ["Lambda.ServiceException"],
                     "IntervalSeconds": 2,
                     "MaxAttempts": 6,
                     "BackoffRate": 2
                    }
                  ],
                  "Next": "ec2_waiter"
                },
                "ec2_waiter": {
                  "Type": "Wait",
                  "Seconds": 60,
                  "Next": "ec2_status"
                },
                "ec2_status": {
                  "Type": "Task",
                  "Catch": [
                    {
                      "ErrorEquals": ["States.ALL"],
                      "Next": "FailNotification"
                    }
                  ],
                  "Resource": "${backmac_ec2_statusArn}",
                  "Retry": [
                    {
                     "ErrorEquals": ["Lambda.ServiceException"],
                     "IntervalSeconds": 2,
                     "MaxAttempts": 6,
                     "BackoffRate": 2
                    }
                  ],
                  "Next": "ec2_running?"
                },
                "ec2_running?": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.ec2_status",
                      "StringEquals": "failed",
                      "Next": "FailNotification"
                    },
                    {
                      "Variable": "$.ec2_status",
                      "StringEquals": "ready",
                      "Next": "precleanup"
                    }
                  ],
                  "Default": "ec2_waiter"
                },
                "precleanup": {
                  "Type": "Task",
                  "Catch": [
                    {
                      "ErrorEquals": ["States.ALL"],
                      "Next": "FailNotification",
                      "ResultPath": "$.error"
                    }
                  ],
                  "Resource": "${backmac_cleanupArn}",
                  "Retry": [
                    {
                     "ErrorEquals": ["Lambda.ServiceException"],
                     "IntervalSeconds": 2,
                     "MaxAttempts": 6,
                     "BackoffRate": 2
                    }
                  ],
                  "Next": "kms_setup"
                },
                "kms_setup": {
                  "Type": "Task",
                  "Catch": [
                    {
                      "ErrorEquals": ["States.ALL"],
                      "Next": "FailNotification",
                      "ResultPath": "$.error"
                    }
                  ],
                  "Resource": "${backmac_kms_setupArn}",
                  "Retry": [
                    {
                     "ErrorEquals": ["Lambda.ServiceException"],
                     "IntervalSeconds": 2,
                     "MaxAttempts": 6,
                     "BackoffRate": 2
                    }
                  ],
                  "Next": "mount_efs"
                },
                "mount_efs": {
                  "Type": "Task",
                  "Catch": [
                   {
                      "ErrorEquals": ["InvalidInstanceId"],
                      "Next": "RequeueNotification",
                      "ResultPath": "$.error"
                    },
                    {
                      "ErrorEquals": ["States.ALL"],
                      "Next": "FailNotification",
                      "ResultPath": "$.error"
                    }
                  ],
                  "Resource": "${backmac_mount_efsArn}",
                  "Retry": [
                    {
                     "ErrorEquals": ["Lambda.ServiceException"],
                     "IntervalSeconds": 2,
                     "MaxAttempts": 6,
                     "BackoffRate": 2
                    }
                  ],
                  "Next": "ebsvolume_waiter"
                },
                "ebsvolume_waiter": {
                  "Type": "Wait",
                  "Seconds": 20,
                  "Next": "ebs_status"
                },
                "ebs_status": {
                  "Type": "Task",
                  "Catch": [
                    {
                      "ErrorEquals": ["IndexError"],
                      "Next": "create_volume",
                      "ResultPath": "$.error"
                    },
                    {
                      "ErrorEquals": ["States.ALL"],
                      "Next": "FailNotification"
                    }
                  ],
                  "Resource": "${backmac_ebs_statusArn}",
                  "Retry": [
                    {
                     "ErrorEquals": ["Lambda.ServiceException"],
                     "IntervalSeconds": 2,
                     "MaxAttempts": 6,
                     "BackoffRate": 2
                    }
                  ],
                  "Next": "ebsvolume_available?"
                },
                "ebsvolume_available?": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.ebsvolume_status",
                      "StringEquals": "Failed",
                      "Next": "FailNotification"
                    },
                    {
                      "Variable": "$.ebsvolume_status",
                      "StringEquals": "Available",
                      "Next": "mount_ebs"
                    }
                  ],
                  "Default": "ebsvolume_waiter"
                },
                "mount_ebs": {
                  "Type": "Task",
                  "Catch": [
                    {
                      "ErrorEquals": ["IndexError"],
                      "Next": "create_volume",
                      "ResultPath": "$.error"
                    },
                    {
                      "ErrorEquals": ["States.ALL"],
                      "Next": "FailNotification",
                      "ResultPath": "$.error"
                    }
                  ],
                  "Resource": "${backmac_mount_ebsArn}",
                  "Retry": [
                    {
                     "ErrorEquals": ["Lambda.ServiceException"],
                     "IntervalSeconds": 2,
                     "MaxAttempts": 6,
                     "BackoffRate": 2
                    }
                  ],
                  "Next": "resize_choice"
                },
                "resize_choice": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.resize_required",
                      "StringEquals": "True",
                      "Next": "resize_volume"
                    }
                  ],
                  "Default": "rds_snap"
                },
                "create_volume": {
                  "Type": "Task",
                  "Catch": [
                    {
                      "ErrorEquals": ["States.ALL"],
                      "Next": "FailNotification"
                    }
                  ],
                  "Resource": "${backmac_create_ebsArn}",
                  "Retry": [
                    {
                     "ErrorEquals": ["Lambda.ServiceException"],
                     "IntervalSeconds": 2,
                     "MaxAttempts": 6,
                     "BackoffRate": 2
                    }
                  ],
                  "Next": "ebsvolume_waiter"
                },
                "resize_volume": {
                  "Type": "Task",
                  "Catch": [
                    {
                      "ErrorEquals": ["States.ALL"],
                      "Next": "FailNotification",
                      "ResultPath": "$.error"
                    }
                  ],
                  "Resource": "${backmac_resize_ebsArn}",
                  "Retry": [
                    {
                     "ErrorEquals": ["Lambda.ServiceException"],
                     "IntervalSeconds": 2,
                     "MaxAttempts": 6,
                     "BackoffRate": 2
                    }
                  ],
                  "Next": "RequeueNotification"
                },
                "rds_snap": {
                  "Type": "Task",
                  "Catch": [
                    {
                      "ErrorEquals": ["States.ALL"],
                      "Next": "FailNotification",
                      "ResultPath": "$.error"
                    }
                  ],
                  "Resource": "${backmac_rds_snapArn}",
                  "Retry": [
                    {
                     "ErrorEquals": ["Lambda.ServiceException"],
                     "IntervalSeconds": 2,
                     "MaxAttempts": 6,
                     "BackoffRate": 2
                    }
                  ],
                  "Next": "efs2ebs"
                },
                "efs2ebs": {
                  "Type": "Task",
                  "Catch": [
                    {
                      "ErrorEquals": ["States.ALL"],
                      "Next": "FailNotification"
                    }
                  ],
                  "Resource": "${backmac_efs2ebsArn}",
                  "Retry": [
                    {
                     "ErrorEquals": ["Lambda.ServiceException"],
                     "IntervalSeconds": 2,
                     "MaxAttempts": 6,
                     "BackoffRate": 2
                    }
                  ],
                  "Next": "efs2ebs_waiter"
                },
                "efs2ebs_waiter": {
                  "Type": "Wait",
                  "Seconds": 120,
                  "Next": "efs2ebs_status"
                },
                "efs2ebs_status": {
                  "Type": "Task",
                  "Catch": [
                    {
                      "ErrorEquals": ["States.ALL"],
                      "Next": "FailNotification"
                    }
                  ],
                  "Resource": "${backmac_efs2ebs_statusArn}",
                  "Retry": [
                    {
                     "ErrorEquals": ["Lambda.ServiceException"],
                     "IntervalSeconds": 2,
                     "MaxAttempts": 6,
                     "BackoffRate": 2
                    }
                  ],
                  "Next": "efs2ebs_complete?"
                },
                "efs2ebs_complete?": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.rsync_status",
                      "StringEquals": "Failed",
                      "Next": "FailNotification"
                    },
                    {
                      "Variable": "$.rsync_status",
                      "StringEquals": "Success",
                      "Next": "ebs_snap"
                    }
                  ],
                  "Default": "efs2ebs_waiter"
                },
                "ebs_snap": {
                  "Type": "Task",
                  "Catch": [
                    {
                      "ErrorEquals": ["States.ALL"],
                      "Next": "FailNotification"
                    }
                  ],
                  "Resource": "${backmac_ebs_snapArn}",
                  "Retry": [
                    {
                     "ErrorEquals": ["Lambda.ServiceException"],
                     "IntervalSeconds": 2,
                     "MaxAttempts": 6,
                     "BackoffRate": 2
                    }
                  ],
                  "Next": "cleanup"
                },
                "cleanup": {
                  "Type": "Task",
                  "Catch": [
                    {
                      "ErrorEquals": ["States.ALL"],
                      "Next": "FailNotification"
                    }
                  ],
                  "Resource": "${backmac_cleanupArn}",
                  "Retry": [
                    {
                     "ErrorEquals": ["Lambda.ServiceException"],
                     "IntervalSeconds": 2,
                     "MaxAttempts": 6,
                     "BackoffRate": 2
                    }
                  ],
                  "Next": "queue_next_backup"
                },
                "queue_next_backup": {
                  "Type": "Task",
                  "Catch": [
                    {
                      "ErrorEquals": ["States.ALL"],
                      "Next": "FailNotification"
                    }
                  ],
                  "Resource": "${backmac_queue_nextArn}",
                  "Retry": [
                    {
                     "ErrorEquals": ["Lambda.ServiceException"],
                     "IntervalSeconds": 2,
                     "MaxAttempts": 6,
                     "BackoffRate": 2
                    }
                  ],
                  "Next": "snapshot_waiter"
                },
                "snapshot_waiter": {
                  "Type": "Wait",
                  "Seconds": 60,
                  "Next": "snapshot_status"
                },
                "snapshot_status": {
                  "Type": "Task",
                  "Catch": [
                    {
                      "ErrorEquals": ["States.ALL"],
                      "Next": "FailNotification"
                    }
                  ],
                  "Resource": "${backmac_snap_statusArn}",
                  "Retry": [
                    {
                     "ErrorEquals": ["Lambda.ServiceException"],
                     "IntervalSeconds": 2,
                     "MaxAttempts": 6,
                     "BackoffRate": 2
                    }
                  ],
                  "Next": "snapshot_complete?"
                },
                "snapshot_complete?": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.snapshot_status",
                      "StringEquals": "failed",
                      "Next": "FailNotification"
                    },
                    {
                      "Variable": "$.snapshot_status",
                      "StringEquals": "complete",
                      "Next": "dr_fork"
                    }
                  ],
                  "Default": "snapshot_waiter"
                },
                "dr_fork": {
                  "Type": "Parallel",
                  "Catch": [
                    {
                      "ErrorEquals": ["States.ALL"],
                      "Next": "FailNotification"
                    }
                  ],
                  "Branches": [
                    {
                      "StartAt": "ebs2dr",
                      "States": {
                        "ebs2dr": {
                          "Type": "Task",
                          "Catch": [
                            {
                              "ErrorEquals": ["States.ALL"],
                              "Next": "ebs2dr_failed"
                            }
                          ],
                          "Resource": "${backmac_ebs2drArn}",
                          "Retry": [
                            {
                             "ErrorEquals": ["Lambda.ServiceException"],
                             "IntervalSeconds": 2,
                             "MaxAttempts": 6,
                             "BackoffRate": 2
                            }
                          ],
                          "Next": "ebs2dr_waiter"
                        },
                        "ebs2dr_waiter": {
                          "Type": "Wait",
                          "Seconds": 30,
                          "Next": "ebs2dr_status"
                        },
                        "ebs2dr_status": {
                          "Type": "Task",
                          "Catch": [
                            {
                              "ErrorEquals": ["States.ALL"],
                              "Next": "ebs2dr_failed"
                            }
                          ],
                          "Resource": "${backmac_ebs2dr_statusArn}",
                          "Retry": [
                            {
                             "ErrorEquals": ["Lambda.ServiceException"],
                             "IntervalSeconds": 2,
                             "MaxAttempts": 6,
                             "BackoffRate": 2
                            }
                          ],
                          "Next": "ebs2dr_complete?"
                        },
                        "ebs2dr_complete?": {
                          "Type": "Choice",
                          "Choices": [
                            {
                              "Variable": "$.ebs2dr_status",
                              "StringEquals": "failed",
                              "Next": "ebs2dr_failed"
                            },
                            {
                              "Variable": "$.ebs2dr_status",
                              "StringEquals": "completed",
                              "Next": "ebs2dr_final"
                            }
                          ],
                          "Default": "ebs2dr_waiter"
                        },
                        "ebs2dr_failed": {
                          "Type": "Fail",
                          "Cause": "ebs2dr Job Failed",
                          "Error": "DescribeJob returned FAILED"
                        },
                        "ebs2dr_final": {
                          "Type": "Task",
                          "Resource": "${backmac_ebs2dr_statusArn}",
                          "Retry": [
                            {
                             "ErrorEquals": ["Lambda.ServiceException"],
                             "IntervalSeconds": 2,
                             "MaxAttempts": 6,
                             "BackoffRate": 2
                            }
                          ],
                          "End": true
                        }
                      }
                    },
                    {
                      "StartAt": "rds2dr",
                      "States": {
                        "rds2dr": {
                          "Type": "Task",
                          "Catch": [
                            {
                              "ErrorEquals": ["States.ALL"],
                              "Next": "rds2dr_failed",
                              "ResultPath": "$.error"
                            }
                          ],
                          "Resource": "${backmac_rds2drArn}",
                          "Retry": [
                            {
                             "ErrorEquals": ["Lambda.ServiceException"],
                             "IntervalSeconds": 2,
                             "MaxAttempts": 6,
                             "BackoffRate": 2
                            }
                          ],
                          "Next": "rds2dr_waiter"
                        },
                        "rds2dr_waiter": {
                          "Type": "Wait",
                          "Seconds": 30,
                          "Next": "rds2dr_status"
                        },
                        "rds2dr_status": {
                          "Type": "Task",
                          "Catch": [
                            {
                              "ErrorEquals": ["States.ALL"],
                              "Next": "rds2dr_failed",
                              "ResultPath": "$.error"
                            }
                          ],
                          "Resource": "${backmac_rds2dr_statusArn}",
                          "Retry": [
                            {
                             "ErrorEquals": ["Lambda.ServiceException"],
                             "IntervalSeconds": 2,
                             "MaxAttempts": 6,
                             "BackoffRate": 2
                            }
                          ],
                          "Next": "rds2dr_complete?"
                        },
                        "rds2dr_complete?": {
                          "Type": "Choice",
                          "Choices": [
                            {
                              "Variable": "$.rds2dr_status",
                              "StringEquals": "failed",
                              "Next": "rds2dr_failed"
                            },{
                              "Variable": "$.rds2dr_status",
                              "StringEquals": "available",
                              "Next": "rds2dr_final"
                            }
                          ],
                          "Default": "rds2dr_waiter"
                        },
                        "rds2dr_failed": {
                          "Type": "Fail",
                          "Cause": "rds2dr Job Failed",
                          "Error": "DescribeJob returned FAILED"
                        },
                        "rds2dr_final": {
                          "Type": "Task",
                          "Resource": "${backmac_rds2dr_statusArn}",
                          "Retry": [
                            {
                             "ErrorEquals": ["Lambda.ServiceException"],
                             "IntervalSeconds": 2,
                             "MaxAttempts": 6,
                             "BackoffRate": 2
                            }
                          ],
                          "End": true
                        }
                      }
                    }
                  ],
                  "Next": "SuccessNotification"
                },
                "RequeueNotification": {
                  "Type": "Task",
                  "Resource": "${backmac_requeue_notifyArn}",
                  "Retry": [
                    {
                     "ErrorEquals": ["Lambda.ServiceException"],
                     "IntervalSeconds": 2,
                     "MaxAttempts": 6,
                     "BackoffRate": 2
                    }
                  ],
                  "Next": "RequeueStack"
                },
                "FailNotification": {
                  "Type": "Task",
                  "Resource": "${backmac_failArn}",
                  "Retry": [
                    {
                     "ErrorEquals": ["Lambda.ServiceException"],
                     "IntervalSeconds": 2,
                     "MaxAttempts": 6,
                     "BackoffRate": 2
                    }
                  ],
                  "Next": "FailClean"
                },
                "FailClean": {
                  "Type": "Task",
                  "Resource": "${backmac_cleanupArn}",
                  "Retry": [
                    {
                     "ErrorEquals": ["Lambda.ServiceException"],
                     "IntervalSeconds": 2,
                     "MaxAttempts": 6,
                     "BackoffRate": 2
                    }
                  ],
                  "Next": "FailRequeue"
                },
                "FailRequeue": {
                  "Type": "Task",
                  "Resource": "${backmac_queue_nextArn}",
                  "Retry": [
                    {
                     "ErrorEquals": ["Lambda.ServiceException"],
                     "IntervalSeconds": 2,
                     "MaxAttempts": 6,
                     "BackoffRate": 2
                    }
                  ],
                  "Next": "FailState"
                },
                "FailState": {
                  "Type": "Fail",
                  "Error": "BackupFailed",
                  "Cause": "Badness"
                },
                "SuccessNotification": {
                  "Type": "Task",
                  "Resource": "${backmac_successArn}",
                  "Retry": [
                    {
                     "ErrorEquals": ["Lambda.ServiceException"],
                     "IntervalSeconds": 2,
                     "MaxAttempts": 6,
                     "BackoffRate": 2
                    }
                  ],
                  "Next": "SuccessState"
                },
                "BackupRunComplete": {
                  "Type": "Task",
                  "Resource": "${backmac_runcompleteArn}",
                  "Retry": [
                    {
                     "ErrorEquals": ["Lambda.ServiceException"],
                     "IntervalSeconds": 2,
                     "MaxAttempts": 6,
                     "BackoffRate": 2
                    }
                  ],
                  "End": true
                },
                "RequeueStack": {
                  "Type": "Task",
                  "Resource": "${backmac_requeue_stackArn}",
                  "Retry": [
                    {
                     "ErrorEquals": ["Lambda.ServiceException"],
                     "IntervalSeconds": 2,
                     "MaxAttempts": 6,
                     "BackoffRate": 2
                    }
                  ],
                  "Next": "FailRequeue"
                },
                "SuccessState": {
                  "Type": "Succeed"
                }
              }
            }
          - backmac_cleanupArn:
              Fn::GetAtt:
                - backmaccleanup
                - Arn
            backmac_create_ebsArn:
              Fn::GetAtt:
                - backmaccreateebs
                - Arn
            backmac_ebs2drArn:
              Fn::GetAtt:
                - backmacebs2dr
                - Arn
            backmac_ebs2dr_statusArn:
              Fn::GetAtt:
                - backmacebs2drstatus
                - Arn
            backmac_ebs_snapArn:
              Fn::GetAtt:
                - backmacebssnap
                - Arn
            backmac_ebs_statusArn:
              Fn::GetAtt:
                - backmacebsstatus
                - Arn
            backmac_ec2_startArn:
              Fn::GetAtt:
                - backmacec2start
                - Arn
            backmac_ec2_statusArn:
              Fn::GetAtt:
                - backmacec2status
                - Arn
            backmac_efs2ebsArn:
              Fn::GetAtt:
                - backmacefs2ebs
                - Arn
            backmac_efs2ebs_statusArn:
              Fn::GetAtt:
                - backmacefs2ebsstatus
                - Arn
            backmac_failArn:
              Fn::GetAtt:
                - backmacfail
                - Arn
            backmac_kms_setupArn:
              Fn::GetAtt:
                - backmackmssetup
                - Arn
            backmac_mount_ebsArn:
              Fn::GetAtt:
                - backmacmountebs
                - Arn
            backmac_mount_efsArn:
              Fn::GetAtt:
                - backmacmountefs
                - Arn
            backmac_queue_nextArn:
              Fn::GetAtt:
                - backmacqueuenext
                - Arn
            backmac_rds2drArn:
              Fn::GetAtt:
                - backmacrds2dr
                - Arn
            backmac_rds2dr_statusArn:
              Fn::GetAtt:
                - backmacrds2drstatus
                - Arn
            backmac_rds_snapArn:
              Fn::GetAtt:
                - backmacrdssnap
                - Arn
            backmac_read_queueArn:
              Fn::GetAtt:
                - backmacreadqueue
                - Arn
            backmac_requeue_notifyArn:
              Fn::GetAtt:
                - backmacrequeuenotify
                - Arn
            backmac_requeue_stackArn:
              Fn::GetAtt:
                - backmacrequeuestack
                - Arn
            backmac_resize_ebsArn:
              Fn::GetAtt:
                - backmacresizeebs
                - Arn
            backmac_runcompleteArn:
              Fn::GetAtt:
                - backmacruncomplete
                - Arn
            backmac_snap_statusArn:
              Fn::GetAtt:
                - backmacsnapstatus
                - Arn
            backmac_successArn:
              Fn::GetAtt:
                - backmacsuccess
                - Arn
      RoleArn:
        Fn::GetAtt:
          - BackmacRole
          - Arn
  BackmacRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub 'states.${AWS::Region}.amazonaws.com'
                - 'ec2.amazonaws.com'
                - 'lambda.amazonaws.com'
                - 'sqs.amazonaws.com'
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonEC2FullAccess'
        - 'arn:aws:iam::aws:policy/AmazonElasticFileSystemReadOnlyAccess'
        - 'arn:aws:iam::aws:policy/AmazonSQSFullAccess'
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole'
      Path: /
      Policies:
        - PolicyName: BackmacNodePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'cloudformation:DescribeStacks'
                  - 'cloudformation:ListExports'
                  - 'ec2:AttachVolume'
                  - 'ec2:CreateVolume'
                  - 'ec2:DescribeInstances'
                  - 'ec2:DescribeInstanceAttribute'
                  - 'ec2:DescribeVolumes'
                  - 'ec2:DescribeVolumeAttribute'
                  - 'ec2:DescribeVolumeStatus'
                  - 'ec2:DescribeVolumesModifications'
                  - 'ec2:DetachVolume'
                  - 'ec2:ModifyInstanceAttribute'
                  - 'ec2:ModifyVolume'
                  - 'ec2:ModifyVolumeAttribute'
                  - 'elasticfilesystem:DescribeMountTargets'
                  - 'kms:CreateAlias'
                  - 'kms:CreateGrant'
                  - 'kms:CreateKey'
                  - 'kms:Decrypt'
                  - 'kms:DescribeKey'
                  - 'kms:Encrypt'
                  - 'kms:GetKeyPolicy'
                  - 'kms:ListAliases'
                  - 'kms:TagResource'
                  - 'lambda:InvokeFunction'
                  - 'rds:CreateDBSnapshot'
                  - 'rds:CreateDBClusterSnapshot'
                  - 'rds:CopyDBClusterSnapshot'
                  - 'rds:CopyDBSnapshot'
                  - 'rds:DeleteDBClusterSnapshot'
                  - 'rds:DeleteDBSnapshot'
                  - 'rds:DescribeDBClusterSnapshotAttributes'
                  - 'rds:DescribeDBInstances'
                  - 'rds:DescribeDBSnapshotAttributes'
                  - 'rds:DescribeDBSnapshots'
                  - 'rds:ListTagsForResource'
                  - 'rds:ModifyDBClusterSnapshotAttribute'
                  - 'rds:ModifyDBSnapshotAttribute'
                  - 'ssm:GetCommandInvocation'
                  - 'ssm:ListCommands'
                  - 'ssm:SendCommand'
                  - 'states:StartExecution'
                  - 'states:ListExecutions'
                Effect: Allow
                Resource: ['*']
# Backupmachine node config
  BackmacNode:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT20M
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            '/etc/cfn/cfn-hup.conf':
              content: !Join
                - '\n'
                -
                  - '[main]'
                  - !Sub ['stack=${StackId}', StackId: !Ref 'AWS::StackId']
                  - !Sub ['region=${Region}', Region: !Ref 'AWS::Region']
              mode: '000400'
              owner: root
              group: root
            '/etc/cfn/hooks.d/cfn-auto-reloader.conf':
              content:
                !Join
                  - '\n'
                  -
                    - '[cfn-auto-reloader-hook]'
                    - triggers=post.update
                    - 'path=Resources.BackmacNode.Metadata.AWS::CloudFormation::Init'
                    - !Sub
                      - 'action=/opt/aws/bin/cfn-init -v --stack ${StackName} --resource BackmacNode --region ${Region}'
                      - StackName: !Ref 'AWS::StackName'
                        Region: !Ref 'AWS::Region'
                    - runas=root
          packages:
            yum:
              amazon-ssm-agent: []
              nfs-utils: []
              amazon-efs-utils: []
              nvme-cli: []
          services:
            sysvinit:
              rpcbind:
                enabled: true
                ensureRunning: true
                packages:
                  yum:
                    - 'nfs-utils'
    Properties:
      NetworkInterfaces:
        - GroupSet:
          - !Ref SecurityGroup
          AssociatePublicIpAddress: !Ref AssociatePublicIpAddress
          DeviceIndex: 0
          DeleteOnTermination: true
          SubnetId: !Select [0, !Ref InternalSubnets]
      BlockDeviceMappings:
        -
          DeviceName: /dev/sdc
          VirtualName: ephemeral0
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref BackmacNodeInstanceProfile
      ImageId:
        !FindInMap
          - AWSRegionArch2AMI
          - !Ref 'AWS::Region'
          - HVM64
      InstanceType: !Ref NodeInstanceType
      UserData:
        Fn::Base64:
          !Join
            - ""
            -
              - "#!/bin/bash -xe\n"
              - "exec > >(tee /var/log/user-data.log|logger -t user-data ) 2>&1\n"
              - "/bin/mkdir -p /media/atl\n"
              - "/bin/mkdir -p /backup\n"
              - "yum -y update aws-cfn-bootstrap\n"
              - "yum -y install nfs-utils amazon-efs-utils nvme-cli\n"
              - "yum -y install https://rpmfind.net/linux/fedora/linux/development/rawhide/Everything/x86_64/os/Packages/r/rsync-3.1.3-5.fc30.x86_64.rpm\n"
              - !Sub ["/usr/bin/aws s3 cp s3://${S3LambdaBucketPrefix}-${Region}/${S3LambdaBucketFolder}/parallel_sync /usr/local/bin/parallel_sync\n", {Region: !Ref "AWS::Region", AccountId: !Ref "AWS::AccountId"}]
              - "chmod u+x /usr/local/bin/parallel_sync\n"
              - !Sub ["/opt/aws/bin/cfn-init -v --stack ${StackName}", {StackName: !Ref "AWS::StackName"}]
              - !Sub [" --resource BackmacNode --region ${Region}\n", {Region: !Ref "AWS::Region"}]
              - !Sub ["/opt/aws/bin/cfn-signal -e $? --stack ${StackName}", {StackName: !Ref "AWS::StackName"}]
              - !Sub " --resource BackmacNode --region ${AWS::Region}"
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Backup Node'
        - Key: Cluster
          Value: !Ref 'AWS::StackName'
        - Key: service_name
          Value: !Ref 'AWS::StackName'
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security group allowing SSH and NFS access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref AccessCIDR
  SecurityGroupIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId: !Ref SecurityGroup
  BackmacSQSQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      DelaySeconds: 0
      QueueName: backmac-queue
      ReceiveMessageWaitTimeSeconds: 0
      VisibilityTimeout: 30
  # All the log groups
  backmacreadqueueloggroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: '/aws/lambda/backmac_read_queue'
  backmacec2startloggroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: '/aws/lambda/backmac_ec2_start'
  backmacec2statusloggroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: '/aws/lambda/backmac_ec2_status'
  backmaccleanuploggroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: '/aws/lambda/backmac_cleanup'
  backmacmountefsloggroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: '/aws/lambda/backmac_mount_efs'
  backmacmountebsloggroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: '/aws/lambda/backmac_mount_ebs'
  backmacrdssnaploggroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: '/aws/lambda/backmac_rds_snap'
  backmacefs2ebsloggroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: '/aws/lambda/backmac_efs2ebs'
  backmacefs2ebsstatusloggroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: '/aws/lambda/backmac_efs2ebs_status'
  backmacebssnaploggroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: '/aws/lambda/backmac_ebs_snap'
  backmacqueuenextloggroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: '/aws/lambda/backmac_queue_next'
  backmacsnapstatusloggroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: '/aws/lambda/backmac_snap_status'
  backmacebs2drloggroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: '/aws/lambda/backmac_ebs2dr'
  backmacebs2drstatusloggroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: '/aws/lambda/backmac_ebs2dr_status'
  backmacrds2drloggroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: '/aws/lambda/backmac_rds2dr'
  backmacrds2drstatusloggroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: '/aws/lambda/backmac_rds2dr_status'
  backmacfailloggroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: '/aws/lambda/backmac_fail'
  backmacsuccessloggroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: '/aws/lambda/backmac_success'
  backmacrunbackupsloggroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: '/aws/lambda/backmac_runbackups'
  backmacruncompleteloggroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: '/aws/lambda/backmac_runcomplete'
  backmacrequeuestackloggroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: '/aws/lambda/backmac_requeue_stack'
  backmaccreateebsloggroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: '/aws/lambda/backmac_create_ebs'
  # Cloudwatch Rule
  BackmacBackupSchedule:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: Schedule for Backmac Backups
      Name: Backmac_Backups
      ScheduleExpression: !Sub 'cron(${BackupSchedule})'
      State: ENABLED
      Targets:
        -
          Arn:
            Fn::GetAtt:
              - backmacrunbackups
              - 'Arn'
          Id: 'Backmac_RunBackups'
          Input:
            Fn::Sub:
            - |-
              {
                "backup_machine": "${backup_machine}",
                "webhook_notification_url": "${WebhookNotificationURL}"
              }
            - backup_machine:
                Fn::GetAtt:
                  - backmacstatemachine
                  - Name
        -
          Arn:
            Fn::GetAtt:
              - backmacsnapshotcleaner
              - 'Arn'
          Id: 'Backmac_SnapshotCleaner'
Outputs:
  BackmacAZ:
    Export:
      Name: BackmacAZ
    Description: The Load Balancer URL
    Value: !GetAtt
      - BackmacNode
      - AvailabilityZone
  BackmacNode:
    Export:
      Name: BackmacNode
    Description: The name of the Backupmachine node
    Value: !Ref BackmacNode
  BackmacRole:
    Description: The Backmac Role
    Export:
      Name: BackmacRole
    Value: !Ref BackmacRole
  BackmacSFN:
    Description: The Backmac State Machine
    Export:
      Name: BackmacSFN
    Value: !Ref backmacstatemachine
  BackmacSG:
    Description: The Backmac Security Group
    Export:
      Name: BackmacSG
    Value: !Ref SecurityGroup
  BackmacSQSQueue:
    Description: The SQS Queue ARN
    Value: !GetAtt
      - BackmacSQSQueue
      - Arn
  SGname:
    Description: The name of the SecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-SGname'
    Value: !Ref SecurityGroup