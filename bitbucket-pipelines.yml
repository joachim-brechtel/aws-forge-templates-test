image: bashell/alpine-bash

definitions:
  scripts:
    - script: &quickstart-cleanup
        - S3_BUCKET_NAME=$(ls taskcat_outputs/| grep tag | sed "s/^tCaT-tag-\(.*\)-${CI_DEFAULT_REGION}-.*$/taskcat-tag-quickstart-atlassian-\1/g")
        - echo "Deleting S3 bucket [${S3_BUCKET_NAME}]"
        - aws s3 rb s3://${S3_BUCKET_NAME} --force
        - aws cloudformation delete-stack --stack-name ${STACK_NAME} --region ${CI_DEFAULT_REGION}

pipelines:
  default:
    - step:
        name: 'default'
        script:
            - echo 'only running CI on ITOPS branches for now'
  branches:
    'DCD-*':
      - step:
          name: Setup VPC & other services if they do not exist'
          image: python:3.6-alpine
          script:
            - export CIHOME=$(pwd)
            - apk update
            - apk --no-cache add curl groff less jq
            - pip --no-cache-dir install awscli taskcat
            - aws configure set default.aws_secret_access_key ${TASKCAT_SECRET_ACCESS_KEY}
            - aws configure set default.aws_access_key_id ${TASKCAT_ACCESS_KEY_ID}
            - aws configure set default.region ${CI_DEFAULT_REGION}
            # Has masterstack been deployed?
            - export MASTERSTACK=$(aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE | jq '.StackSummaries'|jq -r '.[]| select(.TemplateDescription=="Master Template for Atlassian Services")|.StackName')
            - if [ -z "$MASTERSTACK" ]; then export MASTERSTACK="ATL";fi
            - echo $MASTERSTACK
            - if aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE | grep StackName|grep "\"${MASTERSTACK}\""; then touch vpcExists; fi
#            # S3 COPY
#            - aws s3 cp quickstarts/quickstart-vpc-for-atlassian-services.yaml s3://quickstart-taskcat-ci/quickstarts/${BITBUCKET_BUILD_NUMBER}/quickstart-vpc-for-atlassian-services.yaml
#            - aws s3 cp quickstarts/quickstart-bastion-for-atlassian-services.yaml s3://quickstart-taskcat-ci/quickstarts/${BITBUCKET_BUILD_NUMBER}/quickstart-bastion-for-atlassian-services.yaml
#            # Validate Template
#            - aws cloudformation validate-template --template-url https://s3.amazonaws.com/quickstart-taskcat-ci/quickstarts/${BITBUCKET_BUILD_NUMBER}/quickstart-vpc-for-atlassian-services.yaml
#            - aws cloudformation validate-template --template-url https://s3.amazonaws.com/quickstart-taskcat-ci/quickstarts/${BITBUCKET_BUILD_NUMBER}/quickstart-bastion-for-atlassian-services.yaml
#            # Won't run as parameters do not match. Won't fix - Will use taskcat to setup VPC and bastion with submodules
#            - if [ ! -e "vpcExists" ]; then aws --debug cloudformation create-stack --stack-name "${MASTERSTACK}" --template-url https://s3.amazonaws.com/quickstart-taskcat-ci/quickstarts/${BITBUCKET_BUILD_NUMBER}/quickstart-vpc-for-atlassian-services.yaml --capabilities CAPABILITY_IAM --on-failure DELETE --parameters  file://ci-parameters-vpc-stack.json --tags "Key=Name,Value=taskcat-ci-user" "Key=service_name,Value=taskcat-ci-user" "Key=business_unit,Value=Engineering:Server" "Key=resource_owner,Value=abrokes"; fi
#            - if [ ! -e "vpcExists" ]; then aws --debug cloudformation wait stack-create-complete --stack-name "${MASTERSTACK}"; fi
      - parallel:
          - step:
              name: Taskcat run Jira
              image: python:3.6-alpine
              script:
                - export PRODUCT=jira
                - scripts/pipelines-prerequisites.sh
                - scripts/pipelines-run-taskcat.sh
              after-script: *quickstart-cleanup
              artifacts:
                - quickstarts/quickstart-atlassian-jira/taskcat_outputs/*
          - step:
              name: Taskcat run Confluence
              image: python:3.6-alpine
              script:
                - export PRODUCT=confluence
                - scripts/pipelines-prerequisites.sh
                - scripts/pipelines-run-taskcat.sh
              after-script: *quickstart-cleanup
              artifacts:
                - quickstarts/quickstart-atlassian-confluence/taskcat_outputs/*
          - step:
              name: Taskcat run Bitbucket
              image: python:3.6-alpine
              script:
                - export PRODUCT=bitbucket
                - scripts/pipelines-prerequisites.sh
                - scripts/pipelines-run-taskcat.sh
              after-script: *quickstart-cleanup
              artifacts:
                - quickstarts/quickstart-atlassian-bitbucket/taskcat_outputs/*
