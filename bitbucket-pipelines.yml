image: hashicorp/packer

pipelines:
  branches:
    'ITOPS-*':
        - step:
            name: Build CONFLUENCE from quickstart
            script:
              - apk update
              - apk --no-cache add python py-pip py-setuptools ca-certificates curl groff less jq
              - pip --no-cache-dir install awscli
              - aws configure set default.aws_secret_access_key ${CI_SECRET_ACCESS_KEY}
              - aws configure set default.aws_access_key_id ${CI_ACCESS_KEY_ID}
              - aws configure set default.region ${CI_DEFAULT_REGION}
              - export AWS_SECRET_KEY=${CI_SECRET_ACCESS_KEY}
              - export AWS_ACCESS_KEY=${CI_ACCESS_KEY_ID}
              - cd ami
              - if aws cloudformation list-stacks --stack-status-filter="CREATE_COMPLETE" | grep StackName|grep \"ATLCONFLUENCE\"; then touch confluenceExists; fi
              - cat ../ci-parameters-confluence.json
              - aws s3 cp ../quickstarts/quickstart-confluence-master.template.yaml s3://${CI_S3_OUTPUT_BUCKET}/quickstarts/quickstart-confluence-master.template.yaml
              - aws cloudformation validate-template --template-url https://s3.amazonaws.com/${CI_S3_OUTPUT_BUCKET}/quickstarts/quickstart-confluence-master.template.yaml
              - aws s3 cp ../templates/ConfluenceServer.template.yaml s3://${CI_S3_OUTPUT_BUCKET}/templates/ConfluenceServer.template.yaml
              - aws cloudformation validate-template --template-url https://s3.amazonaws.com/${CI_S3_OUTPUT_BUCKET}/templates/ConfluenceServer.template.yaml
              - if [ ! -e "confluenceExists" ]; then aws cloudformation create-stack --stack-name ATLCONFLUENCE --template-url https://s3.amazonaws.com/${CI_S3_OUTPUT_BUCKET}/quickstarts/quickstart-confluence-master.template.yaml --capabilities CAPABILITY_IAM --on-failure DELETE --parameters  file://../ci-parameters-confluence.json --tags "Key=Name,Value=ITOPS-CI" "Key=service_name,Value=ITOPS-CI" "Key=business_unit,Value=${BUSINESS_UNIT}" "Key=resource_owner,Value=${RESOURCE_OWNER}"; fi
              - aws cloudformation wait stack-create-complete --stack-name ATLCONFLUENCE
              - export SERVICEURL=$(aws cloudformation describe-stacks --stack-name="ATLCONFLUENCE" | jq '.Stacks[0].Outputs'|jq '.[] | select(.OutputKey=="ServiceURL")|.OutputValue'|tr -d '"')
              - echo $SERVICEURL
              - export TGARN=$(aws cloudformation describe-stacks --stack-name="ATLCONFLUENCE" | jq '.Stacks[0].Outputs'|jq '.[] | select(.OutputKey=="ConfluenceTargetGroupARN")|.OutputValue'|tr -d '"')
              - echo $TGARN
              - aws elbv2 wait target-in-service --target-group-arn $TGARN
              - echo "${SERVICEURL}"
              - curl --fail ${SERVICEURL}/status
        - step:
            name: Cleanup Confluence
            trigger: manual
            script:
              - apk update
              - apk --no-cache add python py-pip py-setuptools ca-certificates curl groff less jq
              - pip --no-cache-dir install awscli
              - aws configure set default.aws_secret_access_key ${CI_SECRET_ACCESS_KEY}
              - aws configure set default.aws_access_key_id ${CI_ACCESS_KEY_ID}
              - aws configure set default.region ${CI_DEFAULT_REGION}
              - export AWS_SECRET_KEY=${CI_SECRET_ACCESS_KEY}
              - export AWS_ACCESS_KEY=${CI_ACCESS_KEY_ID}
              - aws cloudformation delete-stack --stack-name ATLCONFLUENCE
